{
	"id": "c8ee9a7baa2ab6e89c28e0430a64e775",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.26",
	"solcLongVersion": "0.8.26+commit.8a97fa7a",
	"input": {
		"language": "Solidity",
		"sources": {
			".deps/github/equito-network/equito-evm-contracts/src/EquitoApp.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.23;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {IRouter} from \"./interfaces/IRouter.sol\";\nimport {IEquitoReceiver} from \"./interfaces/IEquitoReceiver.sol\";\nimport {bytes64, EquitoMessage} from \"./libraries/EquitoMessageLibrary.sol\";\nimport {Errors} from \"./libraries/Errors.sol\";\n\n/// @title EquitoApp\n/// @notice This abstract contract is the base for all applications that want to leverage\n///         the Equito cross-chain messaging protocol to communicate with other blockchains.\nabstract contract EquitoApp is IEquitoReceiver, Ownable {\n    /// @dev The Router Contract that is used to send and receive messages.\n    IRouter internal immutable router;\n\n    /// @dev Mapping to store peer addresses for different chain selectors.\n    mapping(uint256 => bytes64) public peers;\n\n    /// @notice Initializes the EquitoApp contract and set the router address.\n    /// @param _router The address of the router contract.\n    constructor(address _router) Ownable(msg.sender) {\n        if (_router == address(0)) {\n            revert Errors.RouterAddressCannotBeZero();\n        }\n        router = IRouter(_router);\n    }\n\n    /// @notice Modifier to restrict access to only the router contract.\n    modifier onlyRouter() {\n        if (msg.sender != address(router)) revert Errors.InvalidRouter(msg.sender);\n        _;\n    }\n\n    /// @notice Allows the owner to set the peer addresses for different chain selectors.\n    /// @param chainSelectors The list of chain selectors.\n    /// @param addresses The list of addresses corresponding to the chain selectors.\n    function setPeers(uint256[] calldata chainSelectors, bytes64[] calldata addresses) external onlyOwner {\n        _setPeers(chainSelectors, addresses);\n    }\n\n    /// @notice Internal function to set the peer addresses for different chain selectors.\n    /// @param chainSelectors The list of chain selectors.\n    /// @param addresses The list of addresses corresponding to the chain selectors.\n    /// @dev This function is internal to allow for easier overriding and extension by derived contracts,\n    ///      facilitating the reuse of peer-setting logic in different contexts.\n    function _setPeers(uint256[] calldata chainSelectors, bytes64[] calldata addresses) internal virtual onlyOwner {\n        if (chainSelectors.length != addresses.length) revert Errors.InvalidLength();\n\n        for (uint256 i = 0; i < chainSelectors.length; ) {\n            peers[chainSelectors[i]] = addresses[i];\n\n            unchecked { ++i; }\n        }\n    }\n\n    /// @notice Returns the peer address for a given chain selector.\n    /// @param chainSelector The chain selector for which the peer address is requested.\n    /// @return The peer address for the given chain selector.\n    /// @dev Throws an error if the chain selector is not found in the mapping.\n    function getPeer(\n        uint256 chainSelector\n    ) public view returns (bytes64 memory) {\n        bytes64 memory peerAddress = peers[chainSelector];\n        if (peerAddress.lower == 0x00 && peerAddress.upper == 0x00) {\n            revert Errors.InvalidPeer(chainSelector);\n        }\n        return peerAddress;\n    }\n\n    /// @notice Receives a cross-chain message from the Router Contract.\n    ///         It is a wrapper function for the `_receiveMessage` functions, that need to be overridden.\n    ///         Only the Router Contract is allowed to call this function.\n    /// @param message The Equito message received.\n    /// @param messageData The data of the message received.\n    function receiveMessage(\n        EquitoMessage calldata message,\n        bytes calldata messageData\n    ) external payable override onlyRouter {\n        bytes64 memory peerAddress = peers[message.sourceChainSelector];\n     \n        if (peerAddress.lower != message.sender.lower || peerAddress.upper != message.sender.upper) {\n            _receiveMessageFromNonPeer(message, messageData);\n        } else {\n            _receiveMessageFromPeer(message, messageData);\n        }\n    }\n\n    /// @notice The logic for receiving a cross-chain message from a peer.\n    /// @param message The Equito message received.\n    /// @param messageData The data of the message received.\n    function _receiveMessageFromPeer(\n        EquitoMessage calldata message,\n        bytes calldata messageData\n    ) internal virtual {}\n\n    /// @notice The logic for receiving a cross-chain message from a non-peer.\n    ///         The default implementation reverts the transaction.\n    /// @param message The Equito message received.\n    /// @param messageData The data of the message received.\n    function _receiveMessageFromNonPeer(\n        EquitoMessage calldata message,\n        bytes calldata messageData    \n    ) internal virtual {\n        revert Errors.InvalidMessageSender();\n    }\n}\n"
			},
			".deps/github/equito-network/equito-evm-contracts/src/libraries/Errors.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.23;\n\n/// @title Errors\n/// @notice Defines all error messages used in the EquitoApp contracts.\nlibrary Errors {\n    /// @notice Thrown when the router address is invalid.\n    /// @param router The address of the router that caused the error.\n    error InvalidRouter(address router);\n\n    /// @notice Thrown when the router address is zero.\n    error RouterAddressCannotBeZero();\n\n    /// @notice Thrown when the proof for verifying messages is invalid.\n    error InvalidMessagesProof();\n\n    /// @notice Thrown when the verifier index provided is out of bounds.\n    error InvalidVerifierIndex();\n\n    /// @notice Thrown when the initial verifier address provided in the constructor is zero.\n    error InitialVerifierZeroAddress();\n\n    /// @notice Thrown when the lengths of arrays are invalid.\n    error InvalidLength();\n\n    /// @notice Thrown when the sender of a message is invalid.\n    error InvalidMessageSender();\n\n    /// @notice Thrown when the provided fee is insufficient to cover the required cost.\n    error InsufficientFee();\n\n    /// @notice Thrown when the amount of ether sent with the transaction is insufficient.\n    error InsufficientValueSent();\n\n    /// @notice Thrown when the provided cost is not greater than zero.\n    error CostMustBeGreaterThanZero();\n\n    /// @notice Thrown when the token price retrieved from the oracle is invalid or zero.\n    error InvalidTokenPriceFromOracle();\n\n    /// @notice Thrown when a message is received from an invalid sovereign account.\n    error InvalidSovereign();\n\n    /// @notice Thrown when an invalid operation code is encountered in the received message.\n    error InvalidOperation();\n\n    /// @notice Thrown when an invalid liquidity provider address is provided.\n    error InvalidLiquidityProvider();\n\n    /// @notice Thrown when a transfer of fees to the liquidity provider fails.\n    error TransferFailed();\n\n    /// @notice Thrown when there is a mismatch in session IDs during validation.\n    error SessionIdMismatch();\n\n    /// @notice Thrown when attempting to set the router, but the router is already set.\n    error RouterAlreadySet();\n\n    /// @notice Thrown when an invalid sender is calling a function.\n    error InvalidSender(address sender);\n\n    /// @notice Thrown when the provided session ID does not match the current session.\n    error InvalidSessionId();\n\n    /// @notice Thrown when a Peer address is not found in the mapping, given a chain selector.\n    /// @param chainSelector The chain selector for which the peer address is requested.\n    error InvalidPeer(uint256 chainSelector);\n}\n"
			},
			".deps/github/equito-network/equito-evm-contracts/src/libraries/EquitoMessageLibrary.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.23;\n\n/// @title bytes64\n/// @notice A struct that holds two bytes32 values, used to store a 64-byte value.\n/// @dev Used to store 64-byte long values for the sender and receiver addresses in the EquitoMessage struct.\nstruct bytes64 {\n    bytes32 lower;\n    bytes32 upper;\n}\n\n/// @title EquitoMessage\n/// @notice The ubiquitous message structure for cross-chain communication, used by the Router contract to deliver and receive messages.\n/// @dev Designed to be used by any chain supported by the Equito protocol.\nstruct EquitoMessage {\n    /// @notice Block number at which the message is emitted.\n    uint256 blockNumber;\n    /// @notice Selector for the source chain, acting as an id.\n    uint256 sourceChainSelector;\n    /// @notice Address of the sender.\n    bytes64 sender;\n    /// @notice Selector for the destination chain, acting as an id.\n    uint256 destinationChainSelector;\n    /// @notice Address of the receiver.\n    bytes64 receiver;\n    /// @notice Hash of the payload of the message to be delivered.\n    bytes32 hashedData;\n}\n\n/// @title EquitoMessageLibrary\n/// @notice Library providing helper functions for EquitoMessage struct.\n/// @dev Contains hashing function for EquitoMessage.\nlibrary EquitoMessageLibrary {\n    /// @notice Converts an address to a bytes64 struct.\n    /// @param addr The address to convert.\n    /// @return The bytes64 struct containing the address.\n    /// @dev The upper bytes32 value is set to 0. This operation cannot fail.\n    function addressToBytes64(address addr) internal pure returns (bytes64 memory) {\n        return bytes64(bytes32(uint256(uint160(addr))), bytes32(0));\n    }\n\n    /// @notice Converts a bytes64 struct to an address.\n    /// @param b64 The bytes64 struct to convert.\n    /// @return The address contained in the bytes64 struct's lower bytes32.\n    /// @dev The upper bytes32 value is ignored. This operation cannot fail.\n    function bytes64ToAddress(bytes64 memory b64) internal pure returns (address) {\n        return address(uint160(uint256(b64.lower)));\n    }\n}\n"
			},
			".deps/github/equito-network/equito-evm-contracts/src/interfaces/IEquitoReceiver.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.23;\n\nimport {EquitoMessage} from \"../libraries/EquitoMessageLibrary.sol\";\n\n/// @title IEquitoReceiver\n/// @notice Interface for contracts that can receive cross-chain messages via the Router contract.\ninterface IEquitoReceiver {\n    /// @notice Receives a cross-chain message from the Router contract.\n    /// @param message The Equito message received.\n    /// @param messageData The data of the message.\n    function receiveMessage(\n        EquitoMessage calldata message,\n        bytes calldata messageData\n    ) external payable;\n}\n"
			},
			".deps/github/equito-network/equito-evm-contracts/src/interfaces/IRouter.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.23;\n\nimport {bytes64, EquitoMessage} from \"../libraries/EquitoMessageLibrary.sol\";\n\n/// @title IRouter\n/// @notice Interface for the Router contract, used to interact with the cross-chain messaging protocol.\ninterface IRouter {\n    /// @notice Emitted when a message send request is created.\n    /// @param message The message being sent.\n    /// @param messageData The data of the message being sent.\n    event MessageSendRequested(EquitoMessage message, bytes messageData);\n\n    /// @notice Emitted when a new verifier is added.\n    /// @param verifier The address of the new verifier.\n    event VerifierAdded(address indexed verifier);\n\n    /// @notice Emitted when a messages has successfully been delivered, ready to be executed.\n    /// @param messageHash The hash of the message that has been delivered.\n    event MessageDelivered(bytes32 messageHash);\n\n    /// @notice Emitted when a message has successfully been executed.\n    /// @param messageHash The hash of the message that has been executed.\n    event MessageExecuted(bytes32 messageHash);\n\n    /// @notice Emitted when the Equito fees are set.\n    event EquitoFeesSet();\n\n    /// @notice Event emitted when the equito address is set.\n    event EquitoAddressSet();\n\n    /// @notice Sends a cross-chain message using Equito.\n    /// @param receiver The address of the receiver.\n    /// @param destinationChainSelector The chain selector of the destination chain.\n    /// @param data The message data.\n    /// @return The hash of the message.\n    function sendMessage(\n        bytes64 calldata receiver,\n        uint256 destinationChainSelector,\n        bytes calldata data\n    ) external payable returns (bytes32);\n\n    /// @notice Verify and execute a message with the appropriate receiver contract.\n    /// @param message The message to be executed.\n    /// @param messageData The data of the message to be executed.\n    /// @param verifierIndex The index of the verifier used to verify the message.\n    /// @param proof The proof to provide to the verifier.\n    function deliverAndExecuteMessage(\n        EquitoMessage calldata message,\n        bytes calldata messageData,\n        uint256 verifierIndex,\n        bytes calldata proof\n    ) external payable;\n\n    /// @notice Delivers messages to be stored for later execution.\n    /// @param messages The list of messages to be delivered.\n    /// @param verifierIndex The index of the verifier used to verify the messages.\n    /// @param proof The proof provided by the verifier.\n    function deliverMessages(\n        EquitoMessage[] calldata messages,\n        uint256 verifierIndex,\n        bytes calldata proof\n    ) external;\n\n    /// @notice Executes a stored message.\n    /// @param message The message to be executed.\n    /// @param messageData The data of the message to be executed.\n    function executeMessage(\n        EquitoMessage calldata message,\n        bytes calldata messageData\n    ) external payable;\n\n    /// @notice Returns the chain selector of the current chain.\n    function chainSelector() external view returns (uint256);\n\n    /// @notice Returns the equito address.\n    function equitoAddress() external view returns (bytes32, bytes32);\n}\n"
			},
			"@openzeppelin/contracts/access/Ownable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": []
		}
	},
	"output": {
		"contracts": {
			".deps/github/equito-network/equito-evm-contracts/src/EquitoApp.sol": {
				"EquitoApp": {
					"abi": [
						{
							"inputs": [],
							"name": "InvalidLength",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InvalidMessageSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "chainSelector",
									"type": "uint256"
								}
							],
							"name": "InvalidPeer",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "router",
									"type": "address"
								}
							],
							"name": "InvalidRouter",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "OwnableInvalidOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "OwnableUnauthorizedAccount",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "RouterAddressCannotBeZero",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "chainSelector",
									"type": "uint256"
								}
							],
							"name": "getPeer",
							"outputs": [
								{
									"components": [
										{
											"internalType": "bytes32",
											"name": "lower",
											"type": "bytes32"
										},
										{
											"internalType": "bytes32",
											"name": "upper",
											"type": "bytes32"
										}
									],
									"internalType": "struct bytes64",
									"name": "",
									"type": "tuple"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"name": "peers",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "lower",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "upper",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "blockNumber",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "sourceChainSelector",
											"type": "uint256"
										},
										{
											"components": [
												{
													"internalType": "bytes32",
													"name": "lower",
													"type": "bytes32"
												},
												{
													"internalType": "bytes32",
													"name": "upper",
													"type": "bytes32"
												}
											],
											"internalType": "struct bytes64",
											"name": "sender",
											"type": "tuple"
										},
										{
											"internalType": "uint256",
											"name": "destinationChainSelector",
											"type": "uint256"
										},
										{
											"components": [
												{
													"internalType": "bytes32",
													"name": "lower",
													"type": "bytes32"
												},
												{
													"internalType": "bytes32",
													"name": "upper",
													"type": "bytes32"
												}
											],
											"internalType": "struct bytes64",
											"name": "receiver",
											"type": "tuple"
										},
										{
											"internalType": "bytes32",
											"name": "hashedData",
											"type": "bytes32"
										}
									],
									"internalType": "struct EquitoMessage",
									"name": "message",
									"type": "tuple"
								},
								{
									"internalType": "bytes",
									"name": "messageData",
									"type": "bytes"
								}
							],
							"name": "receiveMessage",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256[]",
									"name": "chainSelectors",
									"type": "uint256[]"
								},
								{
									"components": [
										{
											"internalType": "bytes32",
											"name": "lower",
											"type": "bytes32"
										},
										{
											"internalType": "bytes32",
											"name": "upper",
											"type": "bytes32"
										}
									],
									"internalType": "struct bytes64[]",
									"name": "addresses",
									"type": "tuple[]"
								}
							],
							"name": "setPeers",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"errors": {
							"InvalidPeer(uint256)": [
								{
									"params": {
										"chainSelector": "The chain selector for which the peer address is requested."
									}
								}
							],
							"InvalidRouter(address)": [
								{
									"params": {
										"router": "The address of the router that caused the error."
									}
								}
							],
							"OwnableInvalidOwner(address)": [
								{
									"details": "The owner is not a valid owner account. (eg. `address(0)`)"
								}
							],
							"OwnableUnauthorizedAccount(address)": [
								{
									"details": "The caller account is not authorized to perform an operation."
								}
							]
						},
						"kind": "dev",
						"methods": {
							"constructor": {
								"params": {
									"_router": "The address of the router contract."
								}
							},
							"getPeer(uint256)": {
								"details": "Throws an error if the chain selector is not found in the mapping.",
								"params": {
									"chainSelector": "The chain selector for which the peer address is requested."
								},
								"returns": {
									"_0": "The peer address for the given chain selector."
								}
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"receiveMessage((uint256,uint256,(bytes32,bytes32),uint256,(bytes32,bytes32),bytes32),bytes)": {
								"params": {
									"message": "The Equito message received.",
									"messageData": "The data of the message received."
								}
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
							},
							"setPeers(uint256[],(bytes32,bytes32)[])": {
								"params": {
									"addresses": "The list of addresses corresponding to the chain selectors.",
									"chainSelectors": "The list of chain selectors."
								}
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"stateVariables": {
							"peers": {
								"details": "Mapping to store peer addresses for different chain selectors."
							},
							"router": {
								"details": "The Router Contract that is used to send and receive messages."
							}
						},
						"title": "EquitoApp",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"getPeer(uint256)": "67ebb6b2",
							"owner()": "8da5cb5b",
							"peers(uint256)": "be4f3e8f",
							"receiveMessage((uint256,uint256,(bytes32,bytes32),uint256,(bytes32,bytes32),bytes32),bytes)": "879d182d",
							"renounceOwnership()": "715018a6",
							"setPeers(uint256[],(bytes32,bytes32)[])": "59a1aae1",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMessageSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainSelector\",\"type\":\"uint256\"}],\"name\":\"InvalidPeer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"InvalidRouter\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RouterAddressCannotBeZero\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainSelector\",\"type\":\"uint256\"}],\"name\":\"getPeer\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"lower\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"upper\",\"type\":\"bytes32\"}],\"internalType\":\"struct bytes64\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"peers\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"lower\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"upper\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sourceChainSelector\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"lower\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"upper\",\"type\":\"bytes32\"}],\"internalType\":\"struct bytes64\",\"name\":\"sender\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"destinationChainSelector\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"lower\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"upper\",\"type\":\"bytes32\"}],\"internalType\":\"struct bytes64\",\"name\":\"receiver\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"hashedData\",\"type\":\"bytes32\"}],\"internalType\":\"struct EquitoMessage\",\"name\":\"message\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"messageData\",\"type\":\"bytes\"}],\"name\":\"receiveMessage\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"chainSelectors\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"lower\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"upper\",\"type\":\"bytes32\"}],\"internalType\":\"struct bytes64[]\",\"name\":\"addresses\",\"type\":\"tuple[]\"}],\"name\":\"setPeers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"InvalidPeer(uint256)\":[{\"params\":{\"chainSelector\":\"The chain selector for which the peer address is requested.\"}}],\"InvalidRouter(address)\":[{\"params\":{\"router\":\"The address of the router that caused the error.\"}}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_router\":\"The address of the router contract.\"}},\"getPeer(uint256)\":{\"details\":\"Throws an error if the chain selector is not found in the mapping.\",\"params\":{\"chainSelector\":\"The chain selector for which the peer address is requested.\"},\"returns\":{\"_0\":\"The peer address for the given chain selector.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"receiveMessage((uint256,uint256,(bytes32,bytes32),uint256,(bytes32,bytes32),bytes32),bytes)\":{\"params\":{\"message\":\"The Equito message received.\",\"messageData\":\"The data of the message received.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setPeers(uint256[],(bytes32,bytes32)[])\":{\"params\":{\"addresses\":\"The list of addresses corresponding to the chain selectors.\",\"chainSelectors\":\"The list of chain selectors.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"peers\":{\"details\":\"Mapping to store peer addresses for different chain selectors.\"},\"router\":{\"details\":\"The Router Contract that is used to send and receive messages.\"}},\"title\":\"EquitoApp\",\"version\":1},\"userdoc\":{\"errors\":{\"InvalidLength()\":[{\"notice\":\"Thrown when the lengths of arrays are invalid.\"}],\"InvalidMessageSender()\":[{\"notice\":\"Thrown when the sender of a message is invalid.\"}],\"InvalidPeer(uint256)\":[{\"notice\":\"Thrown when a Peer address is not found in the mapping, given a chain selector.\"}],\"InvalidRouter(address)\":[{\"notice\":\"Thrown when the router address is invalid.\"}],\"RouterAddressCannotBeZero()\":[{\"notice\":\"Thrown when the router address is zero.\"}]},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Initializes the EquitoApp contract and set the router address.\"},\"getPeer(uint256)\":{\"notice\":\"Returns the peer address for a given chain selector.\"},\"receiveMessage((uint256,uint256,(bytes32,bytes32),uint256,(bytes32,bytes32),bytes32),bytes)\":{\"notice\":\"Receives a cross-chain message from the Router Contract.         It is a wrapper function for the `_receiveMessage` functions, that need to be overridden.         Only the Router Contract is allowed to call this function.\"},\"setPeers(uint256[],(bytes32,bytes32)[])\":{\"notice\":\"Allows the owner to set the peer addresses for different chain selectors.\"}},\"notice\":\"This abstract contract is the base for all applications that want to leverage         the Equito cross-chain messaging protocol to communicate with other blockchains.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\".deps/github/equito-network/equito-evm-contracts/src/EquitoApp.sol\":\"EquitoApp\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\".deps/github/equito-network/equito-evm-contracts/src/EquitoApp.sol\":{\"keccak256\":\"0x61d156be499722fb1ee2dc446d1e8807870c658462d94ea77bb9d97667cf2415\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c7b9528f9515f4fad0dc05b76b5892f9eb1d781f36b58ad42450cdc0a4db458c\",\"dweb:/ipfs/QmcJif7AM1nDFdqGFpJpqnV7z69i1hUoHtBVF2QfMWyYjc\"]},\".deps/github/equito-network/equito-evm-contracts/src/interfaces/IEquitoReceiver.sol\":{\"keccak256\":\"0xb64ed59be348f84a82cc89f4a817ead53b2aa196786e8af9e7459bddcdf6b448\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8c2e5787b6f15ff5dcb8dec914377f5cd50a4a585ef17aff4a7563b206795349\",\"dweb:/ipfs/QmVFwhmUGLvmLhbbzsN1GKRiPif46us47151PAXox4ACyp\"]},\".deps/github/equito-network/equito-evm-contracts/src/interfaces/IRouter.sol\":{\"keccak256\":\"0xfc910f26c039d760ba63a5147b93e7221cb9949bf5819ee55198b5acfcb0395a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e3c2fa12e999c90d0919c129c99e97f1c3e8c65e231de7a29c56eacdfcfa3b69\",\"dweb:/ipfs/QmSkDcYAvqGgxdZJVqxfRmeGSPN5s4ppZLmkQ4vQoZ69yU\"]},\".deps/github/equito-network/equito-evm-contracts/src/libraries/EquitoMessageLibrary.sol\":{\"keccak256\":\"0xcc07267aa6af97e9bb238f44c3d8ec262916625c9a1a8e2510e15e4b6c1d5552\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://47dd6eb755eaf0fef51d4682cc1297d0da980e3134cc993fc760ecbf42be4d1a\",\"dweb:/ipfs/QmP2YL7KRMw1UhJtvss86HMKiQtqLY7YEGN98GfzSqEEjw\"]},\".deps/github/equito-network/equito-evm-contracts/src/libraries/Errors.sol\":{\"keccak256\":\"0x71f69a5b3d0b5e763564066ad6f8663069f27148b7eaca7f08b87e4107dc9535\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e5e7fc2f7a922188b9b19f00ff9eabda587687ee188518054e27226a21df5393\",\"dweb:/ipfs/QmVqKMd9oJdg4cfkdEwcbP3CpHoztnZ1d2e3MAjvKutTt1\"]},\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6\",\"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 525,
								"contract": ".deps/github/equito-network/equito-evm-contracts/src/EquitoApp.sol:EquitoApp",
								"label": "_owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							},
							{
								"astId": 26,
								"contract": ".deps/github/equito-network/equito-evm-contracts/src/EquitoApp.sol:EquitoApp",
								"label": "peers",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_uint256,t_struct(bytes64)373_storage)"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_bytes32": {
								"encoding": "inplace",
								"label": "bytes32",
								"numberOfBytes": "32"
							},
							"t_mapping(t_uint256,t_struct(bytes64)373_storage)": {
								"encoding": "mapping",
								"key": "t_uint256",
								"label": "mapping(uint256 => struct bytes64)",
								"numberOfBytes": "32",
								"value": "t_struct(bytes64)373_storage"
							},
							"t_struct(bytes64)373_storage": {
								"encoding": "inplace",
								"label": "struct bytes64",
								"members": [
									{
										"astId": 370,
										"contract": ".deps/github/equito-network/equito-evm-contracts/src/EquitoApp.sol:EquitoApp",
										"label": "lower",
										"offset": 0,
										"slot": "0",
										"type": "t_bytes32"
									},
									{
										"astId": 372,
										"contract": ".deps/github/equito-network/equito-evm-contracts/src/EquitoApp.sol:EquitoApp",
										"label": "upper",
										"offset": 0,
										"slot": "1",
										"type": "t_bytes32"
									}
								],
								"numberOfBytes": "64"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"errors": {
							"InvalidLength()": [
								{
									"notice": "Thrown when the lengths of arrays are invalid."
								}
							],
							"InvalidMessageSender()": [
								{
									"notice": "Thrown when the sender of a message is invalid."
								}
							],
							"InvalidPeer(uint256)": [
								{
									"notice": "Thrown when a Peer address is not found in the mapping, given a chain selector."
								}
							],
							"InvalidRouter(address)": [
								{
									"notice": "Thrown when the router address is invalid."
								}
							],
							"RouterAddressCannotBeZero()": [
								{
									"notice": "Thrown when the router address is zero."
								}
							]
						},
						"kind": "user",
						"methods": {
							"constructor": {
								"notice": "Initializes the EquitoApp contract and set the router address."
							},
							"getPeer(uint256)": {
								"notice": "Returns the peer address for a given chain selector."
							},
							"receiveMessage((uint256,uint256,(bytes32,bytes32),uint256,(bytes32,bytes32),bytes32),bytes)": {
								"notice": "Receives a cross-chain message from the Router Contract.         It is a wrapper function for the `_receiveMessage` functions, that need to be overridden.         Only the Router Contract is allowed to call this function."
							},
							"setPeers(uint256[],(bytes32,bytes32)[])": {
								"notice": "Allows the owner to set the peer addresses for different chain selectors."
							}
						},
						"notice": "This abstract contract is the base for all applications that want to leverage         the Equito cross-chain messaging protocol to communicate with other blockchains.",
						"version": 1
					}
				}
			},
			".deps/github/equito-network/equito-evm-contracts/src/interfaces/IEquitoReceiver.sol": {
				"IEquitoReceiver": {
					"abi": [
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "blockNumber",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "sourceChainSelector",
											"type": "uint256"
										},
										{
											"components": [
												{
													"internalType": "bytes32",
													"name": "lower",
													"type": "bytes32"
												},
												{
													"internalType": "bytes32",
													"name": "upper",
													"type": "bytes32"
												}
											],
											"internalType": "struct bytes64",
											"name": "sender",
											"type": "tuple"
										},
										{
											"internalType": "uint256",
											"name": "destinationChainSelector",
											"type": "uint256"
										},
										{
											"components": [
												{
													"internalType": "bytes32",
													"name": "lower",
													"type": "bytes32"
												},
												{
													"internalType": "bytes32",
													"name": "upper",
													"type": "bytes32"
												}
											],
											"internalType": "struct bytes64",
											"name": "receiver",
											"type": "tuple"
										},
										{
											"internalType": "bytes32",
											"name": "hashedData",
											"type": "bytes32"
										}
									],
									"internalType": "struct EquitoMessage",
									"name": "message",
									"type": "tuple"
								},
								{
									"internalType": "bytes",
									"name": "messageData",
									"type": "bytes"
								}
							],
							"name": "receiveMessage",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"receiveMessage((uint256,uint256,(bytes32,bytes32),uint256,(bytes32,bytes32),bytes32),bytes)": {
								"params": {
									"message": "The Equito message received.",
									"messageData": "The data of the message."
								}
							}
						},
						"title": "IEquitoReceiver",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"receiveMessage((uint256,uint256,(bytes32,bytes32),uint256,(bytes32,bytes32),bytes32),bytes)": "879d182d"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sourceChainSelector\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"lower\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"upper\",\"type\":\"bytes32\"}],\"internalType\":\"struct bytes64\",\"name\":\"sender\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"destinationChainSelector\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"lower\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"upper\",\"type\":\"bytes32\"}],\"internalType\":\"struct bytes64\",\"name\":\"receiver\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"hashedData\",\"type\":\"bytes32\"}],\"internalType\":\"struct EquitoMessage\",\"name\":\"message\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"messageData\",\"type\":\"bytes\"}],\"name\":\"receiveMessage\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"receiveMessage((uint256,uint256,(bytes32,bytes32),uint256,(bytes32,bytes32),bytes32),bytes)\":{\"params\":{\"message\":\"The Equito message received.\",\"messageData\":\"The data of the message.\"}}},\"title\":\"IEquitoReceiver\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"receiveMessage((uint256,uint256,(bytes32,bytes32),uint256,(bytes32,bytes32),bytes32),bytes)\":{\"notice\":\"Receives a cross-chain message from the Router contract.\"}},\"notice\":\"Interface for contracts that can receive cross-chain messages via the Router contract.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\".deps/github/equito-network/equito-evm-contracts/src/interfaces/IEquitoReceiver.sol\":\"IEquitoReceiver\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\".deps/github/equito-network/equito-evm-contracts/src/interfaces/IEquitoReceiver.sol\":{\"keccak256\":\"0xb64ed59be348f84a82cc89f4a817ead53b2aa196786e8af9e7459bddcdf6b448\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8c2e5787b6f15ff5dcb8dec914377f5cd50a4a585ef17aff4a7563b206795349\",\"dweb:/ipfs/QmVFwhmUGLvmLhbbzsN1GKRiPif46us47151PAXox4ACyp\"]},\".deps/github/equito-network/equito-evm-contracts/src/libraries/EquitoMessageLibrary.sol\":{\"keccak256\":\"0xcc07267aa6af97e9bb238f44c3d8ec262916625c9a1a8e2510e15e4b6c1d5552\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://47dd6eb755eaf0fef51d4682cc1297d0da980e3134cc993fc760ecbf42be4d1a\",\"dweb:/ipfs/QmP2YL7KRMw1UhJtvss86HMKiQtqLY7YEGN98GfzSqEEjw\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"receiveMessage((uint256,uint256,(bytes32,bytes32),uint256,(bytes32,bytes32),bytes32),bytes)": {
								"notice": "Receives a cross-chain message from the Router contract."
							}
						},
						"notice": "Interface for contracts that can receive cross-chain messages via the Router contract.",
						"version": 1
					}
				}
			},
			".deps/github/equito-network/equito-evm-contracts/src/interfaces/IRouter.sol": {
				"IRouter": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [],
							"name": "EquitoAddressSet",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [],
							"name": "EquitoFeesSet",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "bytes32",
									"name": "messageHash",
									"type": "bytes32"
								}
							],
							"name": "MessageDelivered",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "bytes32",
									"name": "messageHash",
									"type": "bytes32"
								}
							],
							"name": "MessageExecuted",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "blockNumber",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "sourceChainSelector",
											"type": "uint256"
										},
										{
											"components": [
												{
													"internalType": "bytes32",
													"name": "lower",
													"type": "bytes32"
												},
												{
													"internalType": "bytes32",
													"name": "upper",
													"type": "bytes32"
												}
											],
											"internalType": "struct bytes64",
											"name": "sender",
											"type": "tuple"
										},
										{
											"internalType": "uint256",
											"name": "destinationChainSelector",
											"type": "uint256"
										},
										{
											"components": [
												{
													"internalType": "bytes32",
													"name": "lower",
													"type": "bytes32"
												},
												{
													"internalType": "bytes32",
													"name": "upper",
													"type": "bytes32"
												}
											],
											"internalType": "struct bytes64",
											"name": "receiver",
											"type": "tuple"
										},
										{
											"internalType": "bytes32",
											"name": "hashedData",
											"type": "bytes32"
										}
									],
									"indexed": false,
									"internalType": "struct EquitoMessage",
									"name": "message",
									"type": "tuple"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "messageData",
									"type": "bytes"
								}
							],
							"name": "MessageSendRequested",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "verifier",
									"type": "address"
								}
							],
							"name": "VerifierAdded",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "chainSelector",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "blockNumber",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "sourceChainSelector",
											"type": "uint256"
										},
										{
											"components": [
												{
													"internalType": "bytes32",
													"name": "lower",
													"type": "bytes32"
												},
												{
													"internalType": "bytes32",
													"name": "upper",
													"type": "bytes32"
												}
											],
											"internalType": "struct bytes64",
											"name": "sender",
											"type": "tuple"
										},
										{
											"internalType": "uint256",
											"name": "destinationChainSelector",
											"type": "uint256"
										},
										{
											"components": [
												{
													"internalType": "bytes32",
													"name": "lower",
													"type": "bytes32"
												},
												{
													"internalType": "bytes32",
													"name": "upper",
													"type": "bytes32"
												}
											],
											"internalType": "struct bytes64",
											"name": "receiver",
											"type": "tuple"
										},
										{
											"internalType": "bytes32",
											"name": "hashedData",
											"type": "bytes32"
										}
									],
									"internalType": "struct EquitoMessage",
									"name": "message",
									"type": "tuple"
								},
								{
									"internalType": "bytes",
									"name": "messageData",
									"type": "bytes"
								},
								{
									"internalType": "uint256",
									"name": "verifierIndex",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "proof",
									"type": "bytes"
								}
							],
							"name": "deliverAndExecuteMessage",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "blockNumber",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "sourceChainSelector",
											"type": "uint256"
										},
										{
											"components": [
												{
													"internalType": "bytes32",
													"name": "lower",
													"type": "bytes32"
												},
												{
													"internalType": "bytes32",
													"name": "upper",
													"type": "bytes32"
												}
											],
											"internalType": "struct bytes64",
											"name": "sender",
											"type": "tuple"
										},
										{
											"internalType": "uint256",
											"name": "destinationChainSelector",
											"type": "uint256"
										},
										{
											"components": [
												{
													"internalType": "bytes32",
													"name": "lower",
													"type": "bytes32"
												},
												{
													"internalType": "bytes32",
													"name": "upper",
													"type": "bytes32"
												}
											],
											"internalType": "struct bytes64",
											"name": "receiver",
											"type": "tuple"
										},
										{
											"internalType": "bytes32",
											"name": "hashedData",
											"type": "bytes32"
										}
									],
									"internalType": "struct EquitoMessage[]",
									"name": "messages",
									"type": "tuple[]"
								},
								{
									"internalType": "uint256",
									"name": "verifierIndex",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "proof",
									"type": "bytes"
								}
							],
							"name": "deliverMessages",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "equitoAddress",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "blockNumber",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "sourceChainSelector",
											"type": "uint256"
										},
										{
											"components": [
												{
													"internalType": "bytes32",
													"name": "lower",
													"type": "bytes32"
												},
												{
													"internalType": "bytes32",
													"name": "upper",
													"type": "bytes32"
												}
											],
											"internalType": "struct bytes64",
											"name": "sender",
											"type": "tuple"
										},
										{
											"internalType": "uint256",
											"name": "destinationChainSelector",
											"type": "uint256"
										},
										{
											"components": [
												{
													"internalType": "bytes32",
													"name": "lower",
													"type": "bytes32"
												},
												{
													"internalType": "bytes32",
													"name": "upper",
													"type": "bytes32"
												}
											],
											"internalType": "struct bytes64",
											"name": "receiver",
											"type": "tuple"
										},
										{
											"internalType": "bytes32",
											"name": "hashedData",
											"type": "bytes32"
										}
									],
									"internalType": "struct EquitoMessage",
									"name": "message",
									"type": "tuple"
								},
								{
									"internalType": "bytes",
									"name": "messageData",
									"type": "bytes"
								}
							],
							"name": "executeMessage",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "bytes32",
											"name": "lower",
											"type": "bytes32"
										},
										{
											"internalType": "bytes32",
											"name": "upper",
											"type": "bytes32"
										}
									],
									"internalType": "struct bytes64",
									"name": "receiver",
									"type": "tuple"
								},
								{
									"internalType": "uint256",
									"name": "destinationChainSelector",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "sendMessage",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						}
					],
					"devdoc": {
						"events": {
							"MessageDelivered(bytes32)": {
								"params": {
									"messageHash": "The hash of the message that has been delivered."
								}
							},
							"MessageExecuted(bytes32)": {
								"params": {
									"messageHash": "The hash of the message that has been executed."
								}
							},
							"MessageSendRequested((uint256,uint256,(bytes32,bytes32),uint256,(bytes32,bytes32),bytes32),bytes)": {
								"params": {
									"message": "The message being sent.",
									"messageData": "The data of the message being sent."
								}
							},
							"VerifierAdded(address)": {
								"params": {
									"verifier": "The address of the new verifier."
								}
							}
						},
						"kind": "dev",
						"methods": {
							"deliverAndExecuteMessage((uint256,uint256,(bytes32,bytes32),uint256,(bytes32,bytes32),bytes32),bytes,uint256,bytes)": {
								"params": {
									"message": "The message to be executed.",
									"messageData": "The data of the message to be executed.",
									"proof": "The proof to provide to the verifier.",
									"verifierIndex": "The index of the verifier used to verify the message."
								}
							},
							"deliverMessages((uint256,uint256,(bytes32,bytes32),uint256,(bytes32,bytes32),bytes32)[],uint256,bytes)": {
								"params": {
									"messages": "The list of messages to be delivered.",
									"proof": "The proof provided by the verifier.",
									"verifierIndex": "The index of the verifier used to verify the messages."
								}
							},
							"executeMessage((uint256,uint256,(bytes32,bytes32),uint256,(bytes32,bytes32),bytes32),bytes)": {
								"params": {
									"message": "The message to be executed.",
									"messageData": "The data of the message to be executed."
								}
							},
							"sendMessage((bytes32,bytes32),uint256,bytes)": {
								"params": {
									"data": "The message data.",
									"destinationChainSelector": "The chain selector of the destination chain.",
									"receiver": "The address of the receiver."
								},
								"returns": {
									"_0": "The hash of the message."
								}
							}
						},
						"title": "IRouter",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"chainSelector()": "4e4bc847",
							"deliverAndExecuteMessage((uint256,uint256,(bytes32,bytes32),uint256,(bytes32,bytes32),bytes32),bytes,uint256,bytes)": "f0a5704a",
							"deliverMessages((uint256,uint256,(bytes32,bytes32),uint256,(bytes32,bytes32),bytes32)[],uint256,bytes)": "71c67f3a",
							"equitoAddress()": "2ef5c989",
							"executeMessage((uint256,uint256,(bytes32,bytes32),uint256,(bytes32,bytes32),bytes32),bytes)": "27d951e9",
							"sendMessage((bytes32,bytes32),uint256,bytes)": "dc203137"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[],\"name\":\"EquitoAddressSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EquitoFeesSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"messageHash\",\"type\":\"bytes32\"}],\"name\":\"MessageDelivered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"messageHash\",\"type\":\"bytes32\"}],\"name\":\"MessageExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sourceChainSelector\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"lower\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"upper\",\"type\":\"bytes32\"}],\"internalType\":\"struct bytes64\",\"name\":\"sender\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"destinationChainSelector\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"lower\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"upper\",\"type\":\"bytes32\"}],\"internalType\":\"struct bytes64\",\"name\":\"receiver\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"hashedData\",\"type\":\"bytes32\"}],\"indexed\":false,\"internalType\":\"struct EquitoMessage\",\"name\":\"message\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"messageData\",\"type\":\"bytes\"}],\"name\":\"MessageSendRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"}],\"name\":\"VerifierAdded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"chainSelector\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sourceChainSelector\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"lower\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"upper\",\"type\":\"bytes32\"}],\"internalType\":\"struct bytes64\",\"name\":\"sender\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"destinationChainSelector\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"lower\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"upper\",\"type\":\"bytes32\"}],\"internalType\":\"struct bytes64\",\"name\":\"receiver\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"hashedData\",\"type\":\"bytes32\"}],\"internalType\":\"struct EquitoMessage\",\"name\":\"message\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"messageData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"verifierIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"}],\"name\":\"deliverAndExecuteMessage\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sourceChainSelector\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"lower\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"upper\",\"type\":\"bytes32\"}],\"internalType\":\"struct bytes64\",\"name\":\"sender\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"destinationChainSelector\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"lower\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"upper\",\"type\":\"bytes32\"}],\"internalType\":\"struct bytes64\",\"name\":\"receiver\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"hashedData\",\"type\":\"bytes32\"}],\"internalType\":\"struct EquitoMessage[]\",\"name\":\"messages\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"verifierIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"}],\"name\":\"deliverMessages\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"equitoAddress\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sourceChainSelector\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"lower\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"upper\",\"type\":\"bytes32\"}],\"internalType\":\"struct bytes64\",\"name\":\"sender\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"destinationChainSelector\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"lower\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"upper\",\"type\":\"bytes32\"}],\"internalType\":\"struct bytes64\",\"name\":\"receiver\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"hashedData\",\"type\":\"bytes32\"}],\"internalType\":\"struct EquitoMessage\",\"name\":\"message\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"messageData\",\"type\":\"bytes\"}],\"name\":\"executeMessage\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"lower\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"upper\",\"type\":\"bytes32\"}],\"internalType\":\"struct bytes64\",\"name\":\"receiver\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"destinationChainSelector\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"sendMessage\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"MessageDelivered(bytes32)\":{\"params\":{\"messageHash\":\"The hash of the message that has been delivered.\"}},\"MessageExecuted(bytes32)\":{\"params\":{\"messageHash\":\"The hash of the message that has been executed.\"}},\"MessageSendRequested((uint256,uint256,(bytes32,bytes32),uint256,(bytes32,bytes32),bytes32),bytes)\":{\"params\":{\"message\":\"The message being sent.\",\"messageData\":\"The data of the message being sent.\"}},\"VerifierAdded(address)\":{\"params\":{\"verifier\":\"The address of the new verifier.\"}}},\"kind\":\"dev\",\"methods\":{\"deliverAndExecuteMessage((uint256,uint256,(bytes32,bytes32),uint256,(bytes32,bytes32),bytes32),bytes,uint256,bytes)\":{\"params\":{\"message\":\"The message to be executed.\",\"messageData\":\"The data of the message to be executed.\",\"proof\":\"The proof to provide to the verifier.\",\"verifierIndex\":\"The index of the verifier used to verify the message.\"}},\"deliverMessages((uint256,uint256,(bytes32,bytes32),uint256,(bytes32,bytes32),bytes32)[],uint256,bytes)\":{\"params\":{\"messages\":\"The list of messages to be delivered.\",\"proof\":\"The proof provided by the verifier.\",\"verifierIndex\":\"The index of the verifier used to verify the messages.\"}},\"executeMessage((uint256,uint256,(bytes32,bytes32),uint256,(bytes32,bytes32),bytes32),bytes)\":{\"params\":{\"message\":\"The message to be executed.\",\"messageData\":\"The data of the message to be executed.\"}},\"sendMessage((bytes32,bytes32),uint256,bytes)\":{\"params\":{\"data\":\"The message data.\",\"destinationChainSelector\":\"The chain selector of the destination chain.\",\"receiver\":\"The address of the receiver.\"},\"returns\":{\"_0\":\"The hash of the message.\"}}},\"title\":\"IRouter\",\"version\":1},\"userdoc\":{\"events\":{\"EquitoAddressSet()\":{\"notice\":\"Event emitted when the equito address is set.\"},\"EquitoFeesSet()\":{\"notice\":\"Emitted when the Equito fees are set.\"},\"MessageDelivered(bytes32)\":{\"notice\":\"Emitted when a messages has successfully been delivered, ready to be executed.\"},\"MessageExecuted(bytes32)\":{\"notice\":\"Emitted when a message has successfully been executed.\"},\"MessageSendRequested((uint256,uint256,(bytes32,bytes32),uint256,(bytes32,bytes32),bytes32),bytes)\":{\"notice\":\"Emitted when a message send request is created.\"},\"VerifierAdded(address)\":{\"notice\":\"Emitted when a new verifier is added.\"}},\"kind\":\"user\",\"methods\":{\"chainSelector()\":{\"notice\":\"Returns the chain selector of the current chain.\"},\"deliverAndExecuteMessage((uint256,uint256,(bytes32,bytes32),uint256,(bytes32,bytes32),bytes32),bytes,uint256,bytes)\":{\"notice\":\"Verify and execute a message with the appropriate receiver contract.\"},\"deliverMessages((uint256,uint256,(bytes32,bytes32),uint256,(bytes32,bytes32),bytes32)[],uint256,bytes)\":{\"notice\":\"Delivers messages to be stored for later execution.\"},\"equitoAddress()\":{\"notice\":\"Returns the equito address.\"},\"executeMessage((uint256,uint256,(bytes32,bytes32),uint256,(bytes32,bytes32),bytes32),bytes)\":{\"notice\":\"Executes a stored message.\"},\"sendMessage((bytes32,bytes32),uint256,bytes)\":{\"notice\":\"Sends a cross-chain message using Equito.\"}},\"notice\":\"Interface for the Router contract, used to interact with the cross-chain messaging protocol.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\".deps/github/equito-network/equito-evm-contracts/src/interfaces/IRouter.sol\":\"IRouter\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\".deps/github/equito-network/equito-evm-contracts/src/interfaces/IRouter.sol\":{\"keccak256\":\"0xfc910f26c039d760ba63a5147b93e7221cb9949bf5819ee55198b5acfcb0395a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e3c2fa12e999c90d0919c129c99e97f1c3e8c65e231de7a29c56eacdfcfa3b69\",\"dweb:/ipfs/QmSkDcYAvqGgxdZJVqxfRmeGSPN5s4ppZLmkQ4vQoZ69yU\"]},\".deps/github/equito-network/equito-evm-contracts/src/libraries/EquitoMessageLibrary.sol\":{\"keccak256\":\"0xcc07267aa6af97e9bb238f44c3d8ec262916625c9a1a8e2510e15e4b6c1d5552\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://47dd6eb755eaf0fef51d4682cc1297d0da980e3134cc993fc760ecbf42be4d1a\",\"dweb:/ipfs/QmP2YL7KRMw1UhJtvss86HMKiQtqLY7YEGN98GfzSqEEjw\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"events": {
							"EquitoAddressSet()": {
								"notice": "Event emitted when the equito address is set."
							},
							"EquitoFeesSet()": {
								"notice": "Emitted when the Equito fees are set."
							},
							"MessageDelivered(bytes32)": {
								"notice": "Emitted when a messages has successfully been delivered, ready to be executed."
							},
							"MessageExecuted(bytes32)": {
								"notice": "Emitted when a message has successfully been executed."
							},
							"MessageSendRequested((uint256,uint256,(bytes32,bytes32),uint256,(bytes32,bytes32),bytes32),bytes)": {
								"notice": "Emitted when a message send request is created."
							},
							"VerifierAdded(address)": {
								"notice": "Emitted when a new verifier is added."
							}
						},
						"kind": "user",
						"methods": {
							"chainSelector()": {
								"notice": "Returns the chain selector of the current chain."
							},
							"deliverAndExecuteMessage((uint256,uint256,(bytes32,bytes32),uint256,(bytes32,bytes32),bytes32),bytes,uint256,bytes)": {
								"notice": "Verify and execute a message with the appropriate receiver contract."
							},
							"deliverMessages((uint256,uint256,(bytes32,bytes32),uint256,(bytes32,bytes32),bytes32)[],uint256,bytes)": {
								"notice": "Delivers messages to be stored for later execution."
							},
							"equitoAddress()": {
								"notice": "Returns the equito address."
							},
							"executeMessage((uint256,uint256,(bytes32,bytes32),uint256,(bytes32,bytes32),bytes32),bytes)": {
								"notice": "Executes a stored message."
							},
							"sendMessage((bytes32,bytes32),uint256,bytes)": {
								"notice": "Sends a cross-chain message using Equito."
							}
						},
						"notice": "Interface for the Router contract, used to interact with the cross-chain messaging protocol.",
						"version": 1
					}
				}
			},
			".deps/github/equito-network/equito-evm-contracts/src/libraries/EquitoMessageLibrary.sol": {
				"EquitoMessageLibrary": {
					"abi": [],
					"devdoc": {
						"details": "Contains hashing function for EquitoMessage.",
						"kind": "dev",
						"methods": {},
						"title": "EquitoMessageLibrary",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \".deps/github/equito-network/equito-evm-contracts/src/libraries/EquitoMessageLibrary.sol\":1257:2092  library EquitoMessageLibrary {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \".deps/github/equito-network/equito-evm-contracts/src/libraries/EquitoMessageLibrary.sol\":1257:2092  library EquitoMessageLibrary {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa264697066735822122014c2df546325df1b5d8b098bee49ce0a25d0bd369c8b48550a62dcd842a563b264736f6c634300081a0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6055604b600b8282823980515f1a607314603f577f4e487b71000000000000000000000000000000000000000000000000000000005f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea264697066735822122014c2df546325df1b5d8b098bee49ce0a25d0bd369c8b48550a62dcd842a563b264736f6c634300081a0033",
							"opcodes": "PUSH1 0x55 PUSH1 0x4B PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x3F JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 EQ 0xC2 0xDF SLOAD PUSH4 0x25DF1B5D DUP12 MULMOD DUP12 0xEE BLOBHASH 0xCE EXP 0x25 0xD0 0xBD CALLDATASIZE SWAP13 DUP12 BASEFEE SSTORE EXP PUSH3 0xDCD842 0xA5 PUSH4 0xB264736F PUSH13 0x634300081A0033000000000000 ",
							"sourceMap": "1257:835:3:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "730000000000000000000000000000000000000000301460806040525f80fdfea264697066735822122014c2df546325df1b5d8b098bee49ce0a25d0bd369c8b48550a62dcd842a563b264736f6c634300081a0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 EQ 0xC2 0xDF SLOAD PUSH4 0x25DF1B5D DUP12 MULMOD DUP12 0xEE BLOBHASH 0xCE EXP 0x25 0xD0 0xBD CALLDATASIZE SWAP13 DUP12 BASEFEE SSTORE EXP PUSH3 0xDCD842 0xA5 PUSH4 0xB264736F PUSH13 0x634300081A0033000000000000 ",
							"sourceMap": "1257:835:3:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17000",
								"executionCost": "92",
								"totalCost": "17092"
							},
							"internal": {
								"addressToBytes64(address)": "infinite",
								"bytes64ToAddress(struct bytes64 memory)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 1257,
									"end": 2092,
									"name": "PUSH #[$]",
									"source": 3,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1257,
									"end": 2092,
									"name": "PUSH [$]",
									"source": 3,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1257,
									"end": 2092,
									"name": "PUSH",
									"source": 3,
									"value": "B"
								},
								{
									"begin": 1257,
									"end": 2092,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 1257,
									"end": 2092,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 1257,
									"end": 2092,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 1257,
									"end": 2092,
									"name": "CODECOPY",
									"source": 3
								},
								{
									"begin": 1257,
									"end": 2092,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 1257,
									"end": 2092,
									"name": "MLOAD",
									"source": 3
								},
								{
									"begin": 1257,
									"end": 2092,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 1257,
									"end": 2092,
									"name": "BYTE",
									"source": 3
								},
								{
									"begin": 1257,
									"end": 2092,
									"name": "PUSH",
									"source": 3,
									"value": "73"
								},
								{
									"begin": 1257,
									"end": 2092,
									"name": "EQ",
									"source": 3
								},
								{
									"begin": 1257,
									"end": 2092,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "1"
								},
								{
									"begin": 1257,
									"end": 2092,
									"name": "JUMPI",
									"source": 3
								},
								{
									"begin": 1257,
									"end": 2092,
									"name": "PUSH",
									"source": 3,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1257,
									"end": 2092,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 1257,
									"end": 2092,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 1257,
									"end": 2092,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 1257,
									"end": 2092,
									"name": "PUSH",
									"source": 3,
									"value": "4"
								},
								{
									"begin": 1257,
									"end": 2092,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 1257,
									"end": 2092,
									"name": "PUSH",
									"source": 3,
									"value": "24"
								},
								{
									"begin": 1257,
									"end": 2092,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 1257,
									"end": 2092,
									"name": "REVERT",
									"source": 3
								},
								{
									"begin": 1257,
									"end": 2092,
									"name": "tag",
									"source": 3,
									"value": "1"
								},
								{
									"begin": 1257,
									"end": 2092,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 1257,
									"end": 2092,
									"name": "ADDRESS",
									"source": 3
								},
								{
									"begin": 1257,
									"end": 2092,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 1257,
									"end": 2092,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 1257,
									"end": 2092,
									"name": "PUSH",
									"source": 3,
									"value": "73"
								},
								{
									"begin": 1257,
									"end": 2092,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 1257,
									"end": 2092,
									"name": "MSTORE8",
									"source": 3
								},
								{
									"begin": 1257,
									"end": 2092,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 1257,
									"end": 2092,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 1257,
									"end": 2092,
									"name": "RETURN",
									"source": 3
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122014c2df546325df1b5d8b098bee49ce0a25d0bd369c8b48550a62dcd842a563b264736f6c634300081a0033",
									".code": [
										{
											"begin": 1257,
											"end": 2092,
											"name": "PUSHDEPLOYADDRESS",
											"source": 3
										},
										{
											"begin": 1257,
											"end": 2092,
											"name": "ADDRESS",
											"source": 3
										},
										{
											"begin": 1257,
											"end": 2092,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 1257,
											"end": 2092,
											"name": "PUSH",
											"source": 3,
											"value": "80"
										},
										{
											"begin": 1257,
											"end": 2092,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 1257,
											"end": 2092,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1257,
											"end": 2092,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 1257,
											"end": 2092,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1257,
											"end": 2092,
											"name": "REVERT",
											"source": 3
										}
									]
								}
							},
							"sourceList": [
								".deps/github/equito-network/equito-evm-contracts/src/EquitoApp.sol",
								".deps/github/equito-network/equito-evm-contracts/src/interfaces/IEquitoReceiver.sol",
								".deps/github/equito-network/equito-evm-contracts/src/interfaces/IRouter.sol",
								".deps/github/equito-network/equito-evm-contracts/src/libraries/EquitoMessageLibrary.sol",
								".deps/github/equito-network/equito-evm-contracts/src/libraries/Errors.sol",
								"@openzeppelin/contracts/access/Ownable.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Contains hashing function for EquitoMessage.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"EquitoMessageLibrary\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Library providing helper functions for EquitoMessage struct.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\".deps/github/equito-network/equito-evm-contracts/src/libraries/EquitoMessageLibrary.sol\":\"EquitoMessageLibrary\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\".deps/github/equito-network/equito-evm-contracts/src/libraries/EquitoMessageLibrary.sol\":{\"keccak256\":\"0xcc07267aa6af97e9bb238f44c3d8ec262916625c9a1a8e2510e15e4b6c1d5552\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://47dd6eb755eaf0fef51d4682cc1297d0da980e3134cc993fc760ecbf42be4d1a\",\"dweb:/ipfs/QmP2YL7KRMw1UhJtvss86HMKiQtqLY7YEGN98GfzSqEEjw\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "Library providing helper functions for EquitoMessage struct.",
						"version": 1
					}
				}
			},
			".deps/github/equito-network/equito-evm-contracts/src/libraries/Errors.sol": {
				"Errors": {
					"abi": [
						{
							"inputs": [],
							"name": "CostMustBeGreaterThanZero",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InitialVerifierZeroAddress",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InsufficientFee",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InsufficientValueSent",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InvalidLength",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InvalidLiquidityProvider",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InvalidMessageSender",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InvalidMessagesProof",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InvalidOperation",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "chainSelector",
									"type": "uint256"
								}
							],
							"name": "InvalidPeer",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "router",
									"type": "address"
								}
							],
							"name": "InvalidRouter",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "InvalidSender",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InvalidSessionId",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InvalidSovereign",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InvalidTokenPriceFromOracle",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InvalidVerifierIndex",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "RouterAddressCannotBeZero",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "RouterAlreadySet",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SessionIdMismatch",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "TransferFailed",
							"type": "error"
						}
					],
					"devdoc": {
						"errors": {
							"InvalidPeer(uint256)": [
								{
									"params": {
										"chainSelector": "The chain selector for which the peer address is requested."
									}
								}
							],
							"InvalidRouter(address)": [
								{
									"params": {
										"router": "The address of the router that caused the error."
									}
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"title": "Errors",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \".deps/github/equito-network/equito-evm-contracts/src/libraries/Errors.sol\":149:2630  library Errors {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \".deps/github/equito-network/equito-evm-contracts/src/libraries/Errors.sol\":149:2630  library Errors {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212206308ce181b19c2007b1e8157ce6ac1066d9ea8f37c4535567bc4d0579f03c33664736f6c634300081a0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6055604b600b8282823980515f1a607314603f577f4e487b71000000000000000000000000000000000000000000000000000000005f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea26469706673582212206308ce181b19c2007b1e8157ce6ac1066d9ea8f37c4535567bc4d0579f03c33664736f6c634300081a0033",
							"opcodes": "PUSH1 0x55 PUSH1 0x4B PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x3F JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH4 0x8CE181B NOT 0xC2 STOP PUSH28 0x1E8157CE6AC1066D9EA8F37C4535567BC4D0579F03C33664736F6C63 NUMBER STOP ADDMOD BYTE STOP CALLER ",
							"sourceMap": "149:2481:4:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "730000000000000000000000000000000000000000301460806040525f80fdfea26469706673582212206308ce181b19c2007b1e8157ce6ac1066d9ea8f37c4535567bc4d0579f03c33664736f6c634300081a0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH4 0x8CE181B NOT 0xC2 STOP PUSH28 0x1E8157CE6AC1066D9EA8F37C4535567BC4D0579F03C33664736F6C63 NUMBER STOP ADDMOD BYTE STOP CALLER ",
							"sourceMap": "149:2481:4:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17000",
								"executionCost": "92",
								"totalCost": "17092"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 149,
									"end": 2630,
									"name": "PUSH #[$]",
									"source": 4,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 149,
									"end": 2630,
									"name": "PUSH [$]",
									"source": 4,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 149,
									"end": 2630,
									"name": "PUSH",
									"source": 4,
									"value": "B"
								},
								{
									"begin": 149,
									"end": 2630,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 149,
									"end": 2630,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 149,
									"end": 2630,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 149,
									"end": 2630,
									"name": "CODECOPY",
									"source": 4
								},
								{
									"begin": 149,
									"end": 2630,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 149,
									"end": 2630,
									"name": "MLOAD",
									"source": 4
								},
								{
									"begin": 149,
									"end": 2630,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 149,
									"end": 2630,
									"name": "BYTE",
									"source": 4
								},
								{
									"begin": 149,
									"end": 2630,
									"name": "PUSH",
									"source": 4,
									"value": "73"
								},
								{
									"begin": 149,
									"end": 2630,
									"name": "EQ",
									"source": 4
								},
								{
									"begin": 149,
									"end": 2630,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "1"
								},
								{
									"begin": 149,
									"end": 2630,
									"name": "JUMPI",
									"source": 4
								},
								{
									"begin": 149,
									"end": 2630,
									"name": "PUSH",
									"source": 4,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 149,
									"end": 2630,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 149,
									"end": 2630,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 149,
									"end": 2630,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 149,
									"end": 2630,
									"name": "PUSH",
									"source": 4,
									"value": "4"
								},
								{
									"begin": 149,
									"end": 2630,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 149,
									"end": 2630,
									"name": "PUSH",
									"source": 4,
									"value": "24"
								},
								{
									"begin": 149,
									"end": 2630,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 149,
									"end": 2630,
									"name": "REVERT",
									"source": 4
								},
								{
									"begin": 149,
									"end": 2630,
									"name": "tag",
									"source": 4,
									"value": "1"
								},
								{
									"begin": 149,
									"end": 2630,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": 149,
									"end": 2630,
									"name": "ADDRESS",
									"source": 4
								},
								{
									"begin": 149,
									"end": 2630,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 149,
									"end": 2630,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 149,
									"end": 2630,
									"name": "PUSH",
									"source": 4,
									"value": "73"
								},
								{
									"begin": 149,
									"end": 2630,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 149,
									"end": 2630,
									"name": "MSTORE8",
									"source": 4
								},
								{
									"begin": 149,
									"end": 2630,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 149,
									"end": 2630,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 149,
									"end": 2630,
									"name": "RETURN",
									"source": 4
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212206308ce181b19c2007b1e8157ce6ac1066d9ea8f37c4535567bc4d0579f03c33664736f6c634300081a0033",
									".code": [
										{
											"begin": 149,
											"end": 2630,
											"name": "PUSHDEPLOYADDRESS",
											"source": 4
										},
										{
											"begin": 149,
											"end": 2630,
											"name": "ADDRESS",
											"source": 4
										},
										{
											"begin": 149,
											"end": 2630,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 149,
											"end": 2630,
											"name": "PUSH",
											"source": 4,
											"value": "80"
										},
										{
											"begin": 149,
											"end": 2630,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 149,
											"end": 2630,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 149,
											"end": 2630,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 149,
											"end": 2630,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 149,
											"end": 2630,
											"name": "REVERT",
											"source": 4
										}
									]
								}
							},
							"sourceList": [
								".deps/github/equito-network/equito-evm-contracts/src/EquitoApp.sol",
								".deps/github/equito-network/equito-evm-contracts/src/interfaces/IEquitoReceiver.sol",
								".deps/github/equito-network/equito-evm-contracts/src/interfaces/IRouter.sol",
								".deps/github/equito-network/equito-evm-contracts/src/libraries/EquitoMessageLibrary.sol",
								".deps/github/equito-network/equito-evm-contracts/src/libraries/Errors.sol",
								"@openzeppelin/contracts/access/Ownable.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"CostMustBeGreaterThanZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InitialVerifierZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientFee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientValueSent\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidLiquidityProvider\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMessageSender\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMessagesProof\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidOperation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainSelector\",\"type\":\"uint256\"}],\"name\":\"InvalidPeer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"InvalidRouter\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"InvalidSender\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSessionId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSovereign\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTokenPriceFromOracle\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidVerifierIndex\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RouterAddressCannotBeZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RouterAlreadySet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SessionIdMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"}],\"devdoc\":{\"errors\":{\"InvalidPeer(uint256)\":[{\"params\":{\"chainSelector\":\"The chain selector for which the peer address is requested.\"}}],\"InvalidRouter(address)\":[{\"params\":{\"router\":\"The address of the router that caused the error.\"}}]},\"kind\":\"dev\",\"methods\":{},\"title\":\"Errors\",\"version\":1},\"userdoc\":{\"errors\":{\"CostMustBeGreaterThanZero()\":[{\"notice\":\"Thrown when the provided cost is not greater than zero.\"}],\"InitialVerifierZeroAddress()\":[{\"notice\":\"Thrown when the initial verifier address provided in the constructor is zero.\"}],\"InsufficientFee()\":[{\"notice\":\"Thrown when the provided fee is insufficient to cover the required cost.\"}],\"InsufficientValueSent()\":[{\"notice\":\"Thrown when the amount of ether sent with the transaction is insufficient.\"}],\"InvalidLength()\":[{\"notice\":\"Thrown when the lengths of arrays are invalid.\"}],\"InvalidLiquidityProvider()\":[{\"notice\":\"Thrown when an invalid liquidity provider address is provided.\"}],\"InvalidMessageSender()\":[{\"notice\":\"Thrown when the sender of a message is invalid.\"}],\"InvalidMessagesProof()\":[{\"notice\":\"Thrown when the proof for verifying messages is invalid.\"}],\"InvalidOperation()\":[{\"notice\":\"Thrown when an invalid operation code is encountered in the received message.\"}],\"InvalidPeer(uint256)\":[{\"notice\":\"Thrown when a Peer address is not found in the mapping, given a chain selector.\"}],\"InvalidRouter(address)\":[{\"notice\":\"Thrown when the router address is invalid.\"}],\"InvalidSender(address)\":[{\"notice\":\"Thrown when an invalid sender is calling a function.\"}],\"InvalidSessionId()\":[{\"notice\":\"Thrown when the provided session ID does not match the current session.\"}],\"InvalidSovereign()\":[{\"notice\":\"Thrown when a message is received from an invalid sovereign account.\"}],\"InvalidTokenPriceFromOracle()\":[{\"notice\":\"Thrown when the token price retrieved from the oracle is invalid or zero.\"}],\"InvalidVerifierIndex()\":[{\"notice\":\"Thrown when the verifier index provided is out of bounds.\"}],\"RouterAddressCannotBeZero()\":[{\"notice\":\"Thrown when the router address is zero.\"}],\"RouterAlreadySet()\":[{\"notice\":\"Thrown when attempting to set the router, but the router is already set.\"}],\"SessionIdMismatch()\":[{\"notice\":\"Thrown when there is a mismatch in session IDs during validation.\"}],\"TransferFailed()\":[{\"notice\":\"Thrown when a transfer of fees to the liquidity provider fails.\"}]},\"kind\":\"user\",\"methods\":{},\"notice\":\"Defines all error messages used in the EquitoApp contracts.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\".deps/github/equito-network/equito-evm-contracts/src/libraries/Errors.sol\":\"Errors\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\".deps/github/equito-network/equito-evm-contracts/src/libraries/Errors.sol\":{\"keccak256\":\"0x71f69a5b3d0b5e763564066ad6f8663069f27148b7eaca7f08b87e4107dc9535\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e5e7fc2f7a922188b9b19f00ff9eabda587687ee188518054e27226a21df5393\",\"dweb:/ipfs/QmVqKMd9oJdg4cfkdEwcbP3CpHoztnZ1d2e3MAjvKutTt1\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"errors": {
							"CostMustBeGreaterThanZero()": [
								{
									"notice": "Thrown when the provided cost is not greater than zero."
								}
							],
							"InitialVerifierZeroAddress()": [
								{
									"notice": "Thrown when the initial verifier address provided in the constructor is zero."
								}
							],
							"InsufficientFee()": [
								{
									"notice": "Thrown when the provided fee is insufficient to cover the required cost."
								}
							],
							"InsufficientValueSent()": [
								{
									"notice": "Thrown when the amount of ether sent with the transaction is insufficient."
								}
							],
							"InvalidLength()": [
								{
									"notice": "Thrown when the lengths of arrays are invalid."
								}
							],
							"InvalidLiquidityProvider()": [
								{
									"notice": "Thrown when an invalid liquidity provider address is provided."
								}
							],
							"InvalidMessageSender()": [
								{
									"notice": "Thrown when the sender of a message is invalid."
								}
							],
							"InvalidMessagesProof()": [
								{
									"notice": "Thrown when the proof for verifying messages is invalid."
								}
							],
							"InvalidOperation()": [
								{
									"notice": "Thrown when an invalid operation code is encountered in the received message."
								}
							],
							"InvalidPeer(uint256)": [
								{
									"notice": "Thrown when a Peer address is not found in the mapping, given a chain selector."
								}
							],
							"InvalidRouter(address)": [
								{
									"notice": "Thrown when the router address is invalid."
								}
							],
							"InvalidSender(address)": [
								{
									"notice": "Thrown when an invalid sender is calling a function."
								}
							],
							"InvalidSessionId()": [
								{
									"notice": "Thrown when the provided session ID does not match the current session."
								}
							],
							"InvalidSovereign()": [
								{
									"notice": "Thrown when a message is received from an invalid sovereign account."
								}
							],
							"InvalidTokenPriceFromOracle()": [
								{
									"notice": "Thrown when the token price retrieved from the oracle is invalid or zero."
								}
							],
							"InvalidVerifierIndex()": [
								{
									"notice": "Thrown when the verifier index provided is out of bounds."
								}
							],
							"RouterAddressCannotBeZero()": [
								{
									"notice": "Thrown when the router address is zero."
								}
							],
							"RouterAlreadySet()": [
								{
									"notice": "Thrown when attempting to set the router, but the router is already set."
								}
							],
							"SessionIdMismatch()": [
								{
									"notice": "Thrown when there is a mismatch in session IDs during validation."
								}
							],
							"TransferFailed()": [
								{
									"notice": "Thrown when a transfer of fees to the liquidity provider fails."
								}
							]
						},
						"kind": "user",
						"methods": {},
						"notice": "Defines all error messages used in the EquitoApp contracts.",
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/access/Ownable.sol": {
				"Ownable": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "OwnableInvalidOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "OwnableUnauthorizedAccount",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. The initial owner is set to the address provided by the deployer. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.",
						"errors": {
							"OwnableInvalidOwner(address)": [
								{
									"details": "The owner is not a valid owner account. (eg. `address(0)`)"
								}
							],
							"OwnableUnauthorizedAccount(address)": [
								{
									"details": "The caller account is not authorized to perform an operation."
								}
							]
						},
						"kind": "dev",
						"methods": {
							"constructor": {
								"details": "Initializes the contract setting the address provided by the deployer as the initial owner."
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. The initial owner is set to the address provided by the deployer. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the address provided by the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6\",\"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 525,
								"contract": "@openzeppelin/contracts/access/Ownable.sol:Ownable",
								"label": "_owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"Context": {
					"abi": [],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"errors": [
			{
				"component": "general",
				"errorCode": "5667",
				"formattedMessage": "Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n   --> .deps/github/equito-network/equito-evm-contracts/src/EquitoApp.sol:103:9:\n    |\n103 |         EquitoMessage calldata message,\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
				"message": "Unused function parameter. Remove or comment out the variable name to silence this warning.",
				"severity": "warning",
				"sourceLocation": {
					"end": 4721,
					"file": ".deps/github/equito-network/equito-evm-contracts/src/EquitoApp.sol",
					"start": 4691
				},
				"type": "Warning"
			},
			{
				"component": "general",
				"errorCode": "5667",
				"formattedMessage": "Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n   --> .deps/github/equito-network/equito-evm-contracts/src/EquitoApp.sol:104:9:\n    |\n104 |         bytes calldata messageData    \n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
				"message": "Unused function parameter. Remove or comment out the variable name to silence this warning.",
				"severity": "warning",
				"sourceLocation": {
					"end": 4757,
					"file": ".deps/github/equito-network/equito-evm-contracts/src/EquitoApp.sol",
					"start": 4731
				},
				"type": "Warning"
			}
		],
		"sources": {
			".deps/github/equito-network/equito-evm-contracts/src/EquitoApp.sol": {
				"ast": {
					"absolutePath": ".deps/github/equito-network/equito-evm-contracts/src/EquitoApp.sol",
					"exportedSymbols": {
						"Context": [
							694
						],
						"EquitoApp": [
							253
						],
						"EquitoMessage": [
							395
						],
						"Errors": [
							516
						],
						"IEquitoReceiver": [
							268
						],
						"IRouter": [
							365
						],
						"Ownable": [
							664
						],
						"bytes64": [
							373
						]
					},
					"id": 254,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".23"
							],
							"nodeType": "PragmaDirective",
							"src": "33:24:0"
						},
						{
							"absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
							"file": "@openzeppelin/contracts/access/Ownable.sol",
							"id": 2,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 254,
							"sourceUnit": 665,
							"src": "59:52:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": ".deps/github/equito-network/equito-evm-contracts/src/interfaces/IRouter.sol",
							"file": "./interfaces/IRouter.sol",
							"id": 4,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 254,
							"sourceUnit": 366,
							"src": "112:49:0",
							"symbolAliases": [
								{
									"foreign": {
										"id": 3,
										"name": "IRouter",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 365,
										"src": "120:7:0",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": ".deps/github/equito-network/equito-evm-contracts/src/interfaces/IEquitoReceiver.sol",
							"file": "./interfaces/IEquitoReceiver.sol",
							"id": 6,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 254,
							"sourceUnit": 269,
							"src": "162:65:0",
							"symbolAliases": [
								{
									"foreign": {
										"id": 5,
										"name": "IEquitoReceiver",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 268,
										"src": "170:15:0",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": ".deps/github/equito-network/equito-evm-contracts/src/libraries/EquitoMessageLibrary.sol",
							"file": "./libraries/EquitoMessageLibrary.sol",
							"id": 9,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 254,
							"sourceUnit": 447,
							"src": "228:76:0",
							"symbolAliases": [
								{
									"foreign": {
										"id": 7,
										"name": "bytes64",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 373,
										"src": "236:7:0",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								},
								{
									"foreign": {
										"id": 8,
										"name": "EquitoMessage",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 395,
										"src": "245:13:0",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": ".deps/github/equito-network/equito-evm-contracts/src/libraries/Errors.sol",
							"file": "./libraries/Errors.sol",
							"id": 11,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 254,
							"sourceUnit": 517,
							"src": "305:46:0",
							"symbolAliases": [
								{
									"foreign": {
										"id": 10,
										"name": "Errors",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 516,
										"src": "313:6:0",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 13,
										"name": "IEquitoReceiver",
										"nameLocations": [
											"588:15:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 268,
										"src": "588:15:0"
									},
									"id": 14,
									"nodeType": "InheritanceSpecifier",
									"src": "588:15:0"
								},
								{
									"baseName": {
										"id": 15,
										"name": "Ownable",
										"nameLocations": [
											"605:7:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 664,
										"src": "605:7:0"
									},
									"id": 16,
									"nodeType": "InheritanceSpecifier",
									"src": "605:7:0"
								}
							],
							"canonicalName": "EquitoApp",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 12,
								"nodeType": "StructuredDocumentation",
								"src": "353:204:0",
								"text": "@title EquitoApp\n @notice This abstract contract is the base for all applications that want to leverage\n         the Equito cross-chain messaging protocol to communicate with other blockchains."
							},
							"fullyImplemented": true,
							"id": 253,
							"linearizedBaseContracts": [
								253,
								664,
								694,
								268
							],
							"name": "EquitoApp",
							"nameLocation": "575:9:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"documentation": {
										"id": 17,
										"nodeType": "StructuredDocumentation",
										"src": "619:71:0",
										"text": "@dev The Router Contract that is used to send and receive messages."
									},
									"id": 20,
									"mutability": "immutable",
									"name": "router",
									"nameLocation": "722:6:0",
									"nodeType": "VariableDeclaration",
									"scope": 253,
									"src": "695:33:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_contract$_IRouter_$365",
										"typeString": "contract IRouter"
									},
									"typeName": {
										"id": 19,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 18,
											"name": "IRouter",
											"nameLocations": [
												"695:7:0"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 365,
											"src": "695:7:0"
										},
										"referencedDeclaration": 365,
										"src": "695:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IRouter_$365",
											"typeString": "contract IRouter"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"documentation": {
										"id": 21,
										"nodeType": "StructuredDocumentation",
										"src": "735:71:0",
										"text": "@dev Mapping to store peer addresses for different chain selectors."
									},
									"functionSelector": "be4f3e8f",
									"id": 26,
									"mutability": "mutable",
									"name": "peers",
									"nameLocation": "846:5:0",
									"nodeType": "VariableDeclaration",
									"scope": 253,
									"src": "811:40:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_bytes64_$373_storage_$",
										"typeString": "mapping(uint256 => struct bytes64)"
									},
									"typeName": {
										"id": 25,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 22,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "819:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"nodeType": "Mapping",
										"src": "811:27:0",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_bytes64_$373_storage_$",
											"typeString": "mapping(uint256 => struct bytes64)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 24,
											"nodeType": "UserDefinedTypeName",
											"pathNode": {
												"id": 23,
												"name": "bytes64",
												"nameLocations": [
													"830:7:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 373,
												"src": "830:7:0"
											},
											"referencedDeclaration": 373,
											"src": "830:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_bytes64_$373_storage_ptr",
												"typeString": "struct bytes64"
											}
										}
									},
									"visibility": "public"
								},
								{
									"body": {
										"id": 55,
										"nodeType": "Block",
										"src": "1045:144:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 41,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 36,
														"name": "_router",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 29,
														"src": "1059:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 39,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1078:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 38,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "1070:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 37,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "1070:7:0",
																"typeDescriptions": {}
															}
														},
														"id": 40,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1070:10:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1059:21:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 48,
												"nodeType": "IfStatement",
												"src": "1055:93:0",
												"trueBody": {
													"id": 47,
													"nodeType": "Block",
													"src": "1082:66:0",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"expression": {
																		"id": 42,
																		"name": "Errors",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 516,
																		"src": "1103:6:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_Errors_$516_$",
																			"typeString": "type(library Errors)"
																		}
																	},
																	"id": 44,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "1110:25:0",
																	"memberName": "RouterAddressCannotBeZero",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 457,
																	"src": "1103:32:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																		"typeString": "function () pure returns (error)"
																	}
																},
																"id": 45,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1103:34:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 46,
															"nodeType": "RevertStatement",
															"src": "1096:41:0"
														}
													]
												}
											},
											{
												"expression": {
													"id": 53,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 49,
														"name": "router",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 20,
														"src": "1157:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IRouter_$365",
															"typeString": "contract IRouter"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 51,
																"name": "_router",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 29,
																"src": "1174:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"id": 50,
															"name": "IRouter",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 365,
															"src": "1166:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_IRouter_$365_$",
																"typeString": "type(contract IRouter)"
															}
														},
														"id": 52,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1166:16:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IRouter_$365",
															"typeString": "contract IRouter"
														}
													},
													"src": "1157:25:0",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IRouter_$365",
														"typeString": "contract IRouter"
													}
												},
												"id": 54,
												"nodeType": "ExpressionStatement",
												"src": "1157:25:0"
											}
										]
									},
									"documentation": {
										"id": 27,
										"nodeType": "StructuredDocumentation",
										"src": "858:133:0",
										"text": "@notice Initializes the EquitoApp contract and set the router address.\n @param _router The address of the router contract."
									},
									"id": 56,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [
										{
											"arguments": [
												{
													"expression": {
														"id": 32,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "1033:3:0",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 33,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "1037:6:0",
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "1033:10:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												}
											],
											"id": 34,
											"kind": "baseConstructorSpecifier",
											"modifierName": {
												"id": 31,
												"name": "Ownable",
												"nameLocations": [
													"1025:7:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 664,
												"src": "1025:7:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "1025:19:0"
										}
									],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 30,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 29,
												"mutability": "mutable",
												"name": "_router",
												"nameLocation": "1016:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 56,
												"src": "1008:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 28,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1008:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1007:17:0"
									},
									"returnParameters": {
										"id": 35,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1045:0:0"
									},
									"scope": 253,
									"src": "996:193:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 75,
										"nodeType": "Block",
										"src": "1290:102:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 65,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 59,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "1304:3:0",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 60,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1308:6:0",
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"src": "1304:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"arguments": [
															{
																"id": 63,
																"name": "router",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 20,
																"src": "1326:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_IRouter_$365",
																	"typeString": "contract IRouter"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_contract$_IRouter_$365",
																	"typeString": "contract IRouter"
																}
															],
															"id": 62,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "1318:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 61,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "1318:7:0",
																"typeDescriptions": {}
															}
														},
														"id": 64,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1318:15:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1304:29:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 73,
												"nodeType": "IfStatement",
												"src": "1300:74:0",
												"trueBody": {
													"errorCall": {
														"arguments": [
															{
																"expression": {
																	"id": 69,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "1363:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 70,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "1367:6:0",
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "1363:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"expression": {
																"id": 66,
																"name": "Errors",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 516,
																"src": "1342:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_Errors_$516_$",
																	"typeString": "type(library Errors)"
																}
															},
															"id": 68,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "1349:13:0",
															"memberName": "InvalidRouter",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 454,
															"src": "1342:20:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																"typeString": "function (address) pure returns (error)"
															}
														},
														"id": 71,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1342:32:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_error",
															"typeString": "error"
														}
													},
													"id": 72,
													"nodeType": "RevertStatement",
													"src": "1335:39:0"
												}
											},
											{
												"id": 74,
												"nodeType": "PlaceholderStatement",
												"src": "1384:1:0"
											}
										]
									},
									"documentation": {
										"id": 57,
										"nodeType": "StructuredDocumentation",
										"src": "1195:68:0",
										"text": "@notice Modifier to restrict access to only the router contract."
									},
									"id": 76,
									"name": "onlyRouter",
									"nameLocation": "1277:10:0",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 58,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1287:2:0"
									},
									"src": "1268:124:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 94,
										"nodeType": "Block",
										"src": "1734:53:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 90,
															"name": "chainSelectors",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 80,
															"src": "1754:14:0",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
																"typeString": "uint256[] calldata"
															}
														},
														{
															"id": 91,
															"name": "addresses",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 84,
															"src": "1770:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_struct$_bytes64_$373_calldata_ptr_$dyn_calldata_ptr",
																"typeString": "struct bytes64 calldata[] calldata"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
																"typeString": "uint256[] calldata"
															},
															{
																"typeIdentifier": "t_array$_t_struct$_bytes64_$373_calldata_ptr_$dyn_calldata_ptr",
																"typeString": "struct bytes64 calldata[] calldata"
															}
														],
														"id": 89,
														"name": "_setPeers",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 144,
														"src": "1744:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_array$_t_uint256_$dyn_calldata_ptr_$_t_array$_t_struct$_bytes64_$373_calldata_ptr_$dyn_calldata_ptr_$returns$__$",
															"typeString": "function (uint256[] calldata,struct bytes64 calldata[] calldata)"
														}
													},
													"id": 92,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1744:36:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 93,
												"nodeType": "ExpressionStatement",
												"src": "1744:36:0"
											}
										]
									},
									"documentation": {
										"id": 77,
										"nodeType": "StructuredDocumentation",
										"src": "1398:229:0",
										"text": "@notice Allows the owner to set the peer addresses for different chain selectors.\n @param chainSelectors The list of chain selectors.\n @param addresses The list of addresses corresponding to the chain selectors."
									},
									"functionSelector": "59a1aae1",
									"id": 95,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 87,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 86,
												"name": "onlyOwner",
												"nameLocations": [
													"1724:9:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 575,
												"src": "1724:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "1724:9:0"
										}
									],
									"name": "setPeers",
									"nameLocation": "1641:8:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 85,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 80,
												"mutability": "mutable",
												"name": "chainSelectors",
												"nameLocation": "1669:14:0",
												"nodeType": "VariableDeclaration",
												"scope": 95,
												"src": "1650:33:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 78,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "1650:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 79,
													"nodeType": "ArrayTypeName",
													"src": "1650:9:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 84,
												"mutability": "mutable",
												"name": "addresses",
												"nameLocation": "1704:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 95,
												"src": "1685:28:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_struct$_bytes64_$373_calldata_ptr_$dyn_calldata_ptr",
													"typeString": "struct bytes64[]"
												},
												"typeName": {
													"baseType": {
														"id": 82,
														"nodeType": "UserDefinedTypeName",
														"pathNode": {
															"id": 81,
															"name": "bytes64",
															"nameLocations": [
																"1685:7:0"
															],
															"nodeType": "IdentifierPath",
															"referencedDeclaration": 373,
															"src": "1685:7:0"
														},
														"referencedDeclaration": 373,
														"src": "1685:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_bytes64_$373_storage_ptr",
															"typeString": "struct bytes64"
														}
													},
													"id": 83,
													"nodeType": "ArrayTypeName",
													"src": "1685:9:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_struct$_bytes64_$373_storage_$dyn_storage_ptr",
														"typeString": "struct bytes64[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1649:65:0"
									},
									"returnParameters": {
										"id": 88,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1734:0:0"
									},
									"scope": 253,
									"src": "1632:155:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 143,
										"nodeType": "Block",
										"src": "2326:248:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 112,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 108,
															"name": "chainSelectors",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 99,
															"src": "2340:14:0",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
																"typeString": "uint256[] calldata"
															}
														},
														"id": 109,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2355:6:0",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "2340:21:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"expression": {
															"id": 110,
															"name": "addresses",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 103,
															"src": "2365:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_struct$_bytes64_$373_calldata_ptr_$dyn_calldata_ptr",
																"typeString": "struct bytes64 calldata[] calldata"
															}
														},
														"id": 111,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2375:6:0",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "2365:16:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2340:41:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 118,
												"nodeType": "IfStatement",
												"src": "2336:76:0",
												"trueBody": {
													"errorCall": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"expression": {
																"id": 113,
																"name": "Errors",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 516,
																"src": "2390:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_Errors_$516_$",
																	"typeString": "type(library Errors)"
																}
															},
															"id": 115,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "2397:13:0",
															"memberName": "InvalidLength",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 469,
															"src": "2390:20:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																"typeString": "function () pure returns (error)"
															}
														},
														"id": 116,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2390:22:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_error",
															"typeString": "error"
														}
													},
													"id": 117,
													"nodeType": "RevertStatement",
													"src": "2383:29:0"
												}
											},
											{
												"body": {
													"id": 141,
													"nodeType": "Block",
													"src": "2472:96:0",
													"statements": [
														{
															"expression": {
																"id": 135,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"id": 127,
																		"name": "peers",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 26,
																		"src": "2486:5:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_bytes64_$373_storage_$",
																			"typeString": "mapping(uint256 => struct bytes64 storage ref)"
																		}
																	},
																	"id": 131,
																	"indexExpression": {
																		"baseExpression": {
																			"id": 128,
																			"name": "chainSelectors",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 99,
																			"src": "2492:14:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
																				"typeString": "uint256[] calldata"
																			}
																		},
																		"id": 130,
																		"indexExpression": {
																			"id": 129,
																			"name": "i",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 120,
																			"src": "2507:1:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "2492:17:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "2486:24:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_bytes64_$373_storage",
																		"typeString": "struct bytes64 storage ref"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"baseExpression": {
																		"id": 132,
																		"name": "addresses",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 103,
																		"src": "2513:9:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_struct$_bytes64_$373_calldata_ptr_$dyn_calldata_ptr",
																			"typeString": "struct bytes64 calldata[] calldata"
																		}
																	},
																	"id": 134,
																	"indexExpression": {
																		"id": 133,
																		"name": "i",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 120,
																		"src": "2523:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "2513:12:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_bytes64_$373_calldata_ptr",
																		"typeString": "struct bytes64 calldata"
																	}
																},
																"src": "2486:39:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_bytes64_$373_storage",
																	"typeString": "struct bytes64 storage ref"
																}
															},
															"id": 136,
															"nodeType": "ExpressionStatement",
															"src": "2486:39:0"
														},
														{
															"id": 140,
															"nodeType": "UncheckedBlock",
															"src": "2540:18:0",
															"statements": [
																{
																	"expression": {
																		"id": 138,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "++",
																		"prefix": true,
																		"src": "2552:3:0",
																		"subExpression": {
																			"id": 137,
																			"name": "i",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 120,
																			"src": "2554:1:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 139,
																	"nodeType": "ExpressionStatement",
																	"src": "2552:3:0"
																}
															]
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 126,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 123,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 120,
														"src": "2443:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"expression": {
															"id": 124,
															"name": "chainSelectors",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 99,
															"src": "2447:14:0",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
																"typeString": "uint256[] calldata"
															}
														},
														"id": 125,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2462:6:0",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "2447:21:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2443:25:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 142,
												"initializationExpression": {
													"assignments": [
														120
													],
													"declarations": [
														{
															"constant": false,
															"id": 120,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "2436:1:0",
															"nodeType": "VariableDeclaration",
															"scope": 142,
															"src": "2428:9:0",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 119,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "2428:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 122,
													"initialValue": {
														"hexValue": "30",
														"id": 121,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2440:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "2428:13:0"
												},
												"isSimpleCounterLoop": false,
												"nodeType": "ForStatement",
												"src": "2423:145:0"
											}
										]
									},
									"documentation": {
										"id": 96,
										"nodeType": "StructuredDocumentation",
										"src": "1793:417:0",
										"text": "@notice Internal function to set the peer addresses for different chain selectors.\n @param chainSelectors The list of chain selectors.\n @param addresses The list of addresses corresponding to the chain selectors.\n @dev This function is internal to allow for easier overriding and extension by derived contracts,\n      facilitating the reuse of peer-setting logic in different contexts."
									},
									"id": 144,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 106,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 105,
												"name": "onlyOwner",
												"nameLocations": [
													"2316:9:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 575,
												"src": "2316:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "2316:9:0"
										}
									],
									"name": "_setPeers",
									"nameLocation": "2224:9:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 104,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 99,
												"mutability": "mutable",
												"name": "chainSelectors",
												"nameLocation": "2253:14:0",
												"nodeType": "VariableDeclaration",
												"scope": 144,
												"src": "2234:33:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 97,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "2234:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 98,
													"nodeType": "ArrayTypeName",
													"src": "2234:9:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 103,
												"mutability": "mutable",
												"name": "addresses",
												"nameLocation": "2288:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 144,
												"src": "2269:28:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_struct$_bytes64_$373_calldata_ptr_$dyn_calldata_ptr",
													"typeString": "struct bytes64[]"
												},
												"typeName": {
													"baseType": {
														"id": 101,
														"nodeType": "UserDefinedTypeName",
														"pathNode": {
															"id": 100,
															"name": "bytes64",
															"nameLocations": [
																"2269:7:0"
															],
															"nodeType": "IdentifierPath",
															"referencedDeclaration": 373,
															"src": "2269:7:0"
														},
														"referencedDeclaration": 373,
														"src": "2269:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_bytes64_$373_storage_ptr",
															"typeString": "struct bytes64"
														}
													},
													"id": 102,
													"nodeType": "ArrayTypeName",
													"src": "2269:9:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_struct$_bytes64_$373_storage_$dyn_storage_ptr",
														"typeString": "struct bytes64[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2233:65:0"
									},
									"returnParameters": {
										"id": 107,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2326:0:0"
									},
									"scope": 253,
									"src": "2215:359:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 179,
										"nodeType": "Block",
										"src": "2972:228:0",
										"statements": [
											{
												"assignments": [
													155
												],
												"declarations": [
													{
														"constant": false,
														"id": 155,
														"mutability": "mutable",
														"name": "peerAddress",
														"nameLocation": "2997:11:0",
														"nodeType": "VariableDeclaration",
														"scope": 179,
														"src": "2982:26:0",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_bytes64_$373_memory_ptr",
															"typeString": "struct bytes64"
														},
														"typeName": {
															"id": 154,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 153,
																"name": "bytes64",
																"nameLocations": [
																	"2982:7:0"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 373,
																"src": "2982:7:0"
															},
															"referencedDeclaration": 373,
															"src": "2982:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_bytes64_$373_storage_ptr",
																"typeString": "struct bytes64"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 159,
												"initialValue": {
													"baseExpression": {
														"id": 156,
														"name": "peers",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 26,
														"src": "3011:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_bytes64_$373_storage_$",
															"typeString": "mapping(uint256 => struct bytes64 storage ref)"
														}
													},
													"id": 158,
													"indexExpression": {
														"id": 157,
														"name": "chainSelector",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 147,
														"src": "3017:13:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "3011:20:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_bytes64_$373_storage",
														"typeString": "struct bytes64 storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2982:49:0"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 168,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"id": 163,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"id": 160,
																"name": "peerAddress",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 155,
																"src": "3045:11:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_bytes64_$373_memory_ptr",
																	"typeString": "struct bytes64 memory"
																}
															},
															"id": 161,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3057:5:0",
															"memberName": "lower",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 370,
															"src": "3045:17:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"hexValue": "30783030",
															"id": 162,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3066:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0x00"
														},
														"src": "3045:25:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"id": 167,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"id": 164,
																"name": "peerAddress",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 155,
																"src": "3074:11:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_bytes64_$373_memory_ptr",
																	"typeString": "struct bytes64 memory"
																}
															},
															"id": 165,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3086:5:0",
															"memberName": "upper",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 372,
															"src": "3074:17:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"hexValue": "30783030",
															"id": 166,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3095:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0x00"
														},
														"src": "3074:25:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "3045:54:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 176,
												"nodeType": "IfStatement",
												"src": "3041:125:0",
												"trueBody": {
													"id": 175,
													"nodeType": "Block",
													"src": "3101:65:0",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"id": 172,
																		"name": "chainSelector",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 147,
																		"src": "3141:13:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"id": 169,
																		"name": "Errors",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 516,
																		"src": "3122:6:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_Errors_$516_$",
																			"typeString": "type(library Errors)"
																		}
																	},
																	"id": 171,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "3129:11:0",
																	"memberName": "InvalidPeer",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 515,
																	"src": "3122:18:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_uint256_$returns$_t_error_$",
																		"typeString": "function (uint256) pure returns (error)"
																	}
																},
																"id": 173,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3122:33:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 174,
															"nodeType": "RevertStatement",
															"src": "3115:40:0"
														}
													]
												}
											},
											{
												"expression": {
													"id": 177,
													"name": "peerAddress",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 155,
													"src": "3182:11:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_bytes64_$373_memory_ptr",
														"typeString": "struct bytes64 memory"
													}
												},
												"functionReturnParameters": 152,
												"id": 178,
												"nodeType": "Return",
												"src": "3175:18:0"
											}
										]
									},
									"documentation": {
										"id": 145,
										"nodeType": "StructuredDocumentation",
										"src": "2580:296:0",
										"text": "@notice Returns the peer address for a given chain selector.\n @param chainSelector The chain selector for which the peer address is requested.\n @return The peer address for the given chain selector.\n @dev Throws an error if the chain selector is not found in the mapping."
									},
									"functionSelector": "67ebb6b2",
									"id": 180,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getPeer",
									"nameLocation": "2890:7:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 148,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 147,
												"mutability": "mutable",
												"name": "chainSelector",
												"nameLocation": "2915:13:0",
												"nodeType": "VariableDeclaration",
												"scope": 180,
												"src": "2907:21:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 146,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2907:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2897:37:0"
									},
									"returnParameters": {
										"id": 152,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 151,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 180,
												"src": "2956:14:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_bytes64_$373_memory_ptr",
													"typeString": "struct bytes64"
												},
												"typeName": {
													"id": 150,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 149,
														"name": "bytes64",
														"nameLocations": [
															"2956:7:0"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 373,
														"src": "2956:7:0"
													},
													"referencedDeclaration": 373,
													"src": "2956:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_bytes64_$373_storage_ptr",
														"typeString": "struct bytes64"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2955:16:0"
									},
									"scope": 253,
									"src": "2881:319:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										267
									],
									"body": {
										"id": 226,
										"nodeType": "Block",
										"src": "3716:336:0",
										"statements": [
											{
												"assignments": [
													194
												],
												"declarations": [
													{
														"constant": false,
														"id": 194,
														"mutability": "mutable",
														"name": "peerAddress",
														"nameLocation": "3741:11:0",
														"nodeType": "VariableDeclaration",
														"scope": 226,
														"src": "3726:26:0",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_bytes64_$373_memory_ptr",
															"typeString": "struct bytes64"
														},
														"typeName": {
															"id": 193,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 192,
																"name": "bytes64",
																"nameLocations": [
																	"3726:7:0"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 373,
																"src": "3726:7:0"
															},
															"referencedDeclaration": 373,
															"src": "3726:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_bytes64_$373_storage_ptr",
																"typeString": "struct bytes64"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 199,
												"initialValue": {
													"baseExpression": {
														"id": 195,
														"name": "peers",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 26,
														"src": "3755:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_bytes64_$373_storage_$",
															"typeString": "mapping(uint256 => struct bytes64 storage ref)"
														}
													},
													"id": 198,
													"indexExpression": {
														"expression": {
															"id": 196,
															"name": "message",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 184,
															"src": "3761:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_EquitoMessage_$395_calldata_ptr",
																"typeString": "struct EquitoMessage calldata"
															}
														},
														"id": 197,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "3769:19:0",
														"memberName": "sourceChainSelector",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 380,
														"src": "3761:27:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "3755:34:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_bytes64_$373_storage",
														"typeString": "struct bytes64 storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3726:63:0"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 212,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"id": 205,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"id": 200,
																"name": "peerAddress",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 194,
																"src": "3809:11:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_bytes64_$373_memory_ptr",
																	"typeString": "struct bytes64 memory"
																}
															},
															"id": 201,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3821:5:0",
															"memberName": "lower",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 370,
															"src": "3809:17:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "!=",
														"rightExpression": {
															"expression": {
																"expression": {
																	"id": 202,
																	"name": "message",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 184,
																	"src": "3830:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_EquitoMessage_$395_calldata_ptr",
																		"typeString": "struct EquitoMessage calldata"
																	}
																},
																"id": 203,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "3838:6:0",
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 384,
																"src": "3830:14:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_bytes64_$373_calldata_ptr",
																	"typeString": "struct bytes64 calldata"
																}
															},
															"id": 204,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3845:5:0",
															"memberName": "lower",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 370,
															"src": "3830:20:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"src": "3809:41:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "||",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"id": 211,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"id": 206,
																"name": "peerAddress",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 194,
																"src": "3854:11:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_bytes64_$373_memory_ptr",
																	"typeString": "struct bytes64 memory"
																}
															},
															"id": 207,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3866:5:0",
															"memberName": "upper",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 372,
															"src": "3854:17:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "!=",
														"rightExpression": {
															"expression": {
																"expression": {
																	"id": 208,
																	"name": "message",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 184,
																	"src": "3875:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_EquitoMessage_$395_calldata_ptr",
																		"typeString": "struct EquitoMessage calldata"
																	}
																},
																"id": 209,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "3883:6:0",
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 384,
																"src": "3875:14:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_bytes64_$373_calldata_ptr",
																	"typeString": "struct bytes64 calldata"
																}
															},
															"id": 210,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3890:5:0",
															"memberName": "upper",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 372,
															"src": "3875:20:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"src": "3854:41:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "3809:86:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 224,
													"nodeType": "Block",
													"src": "3976:70:0",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 220,
																		"name": "message",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 184,
																		"src": "4014:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_EquitoMessage_$395_calldata_ptr",
																			"typeString": "struct EquitoMessage calldata"
																		}
																	},
																	{
																		"id": 221,
																		"name": "messageData",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 186,
																		"src": "4023:11:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_calldata_ptr",
																			"typeString": "bytes calldata"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_struct$_EquitoMessage_$395_calldata_ptr",
																			"typeString": "struct EquitoMessage calldata"
																		},
																		{
																			"typeIdentifier": "t_bytes_calldata_ptr",
																			"typeString": "bytes calldata"
																		}
																	],
																	"id": 219,
																	"name": "_receiveMessageFromPeer",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 237,
																	"src": "3990:23:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_EquitoMessage_$395_calldata_ptr_$_t_bytes_calldata_ptr_$returns$__$",
																		"typeString": "function (struct EquitoMessage calldata,bytes calldata)"
																	}
																},
																"id": 222,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3990:45:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 223,
															"nodeType": "ExpressionStatement",
															"src": "3990:45:0"
														}
													]
												},
												"id": 225,
												"nodeType": "IfStatement",
												"src": "3805:241:0",
												"trueBody": {
													"id": 218,
													"nodeType": "Block",
													"src": "3897:73:0",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 214,
																		"name": "message",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 184,
																		"src": "3938:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_EquitoMessage_$395_calldata_ptr",
																			"typeString": "struct EquitoMessage calldata"
																		}
																	},
																	{
																		"id": 215,
																		"name": "messageData",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 186,
																		"src": "3947:11:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_calldata_ptr",
																			"typeString": "bytes calldata"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_struct$_EquitoMessage_$395_calldata_ptr",
																			"typeString": "struct EquitoMessage calldata"
																		},
																		{
																			"typeIdentifier": "t_bytes_calldata_ptr",
																			"typeString": "bytes calldata"
																		}
																	],
																	"id": 213,
																	"name": "_receiveMessageFromNonPeer",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 252,
																	"src": "3911:26:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_EquitoMessage_$395_calldata_ptr_$_t_bytes_calldata_ptr_$returns$__$",
																		"typeString": "function (struct EquitoMessage calldata,bytes calldata)"
																	}
																},
																"id": 216,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3911:48:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 217,
															"nodeType": "ExpressionStatement",
															"src": "3911:48:0"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 181,
										"nodeType": "StructuredDocumentation",
										"src": "3206:362:0",
										"text": "@notice Receives a cross-chain message from the Router Contract.\n         It is a wrapper function for the `_receiveMessage` functions, that need to be overridden.\n         Only the Router Contract is allowed to call this function.\n @param message The Equito message received.\n @param messageData The data of the message received."
									},
									"functionSelector": "879d182d",
									"id": 227,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 190,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 189,
												"name": "onlyRouter",
												"nameLocations": [
													"3705:10:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 76,
												"src": "3705:10:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "3705:10:0"
										}
									],
									"name": "receiveMessage",
									"nameLocation": "3582:14:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 188,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3696:8:0"
									},
									"parameters": {
										"id": 187,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 184,
												"mutability": "mutable",
												"name": "message",
												"nameLocation": "3629:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 227,
												"src": "3606:30:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_EquitoMessage_$395_calldata_ptr",
													"typeString": "struct EquitoMessage"
												},
												"typeName": {
													"id": 183,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 182,
														"name": "EquitoMessage",
														"nameLocations": [
															"3606:13:0"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 395,
														"src": "3606:13:0"
													},
													"referencedDeclaration": 395,
													"src": "3606:13:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_EquitoMessage_$395_storage_ptr",
														"typeString": "struct EquitoMessage"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 186,
												"mutability": "mutable",
												"name": "messageData",
												"nameLocation": "3661:11:0",
												"nodeType": "VariableDeclaration",
												"scope": 227,
												"src": "3646:26:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 185,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3646:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3596:82:0"
									},
									"returnParameters": {
										"id": 191,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3716:0:0"
									},
									"scope": 253,
									"src": "3573:479:0",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 236,
										"nodeType": "Block",
										"src": "4378:2:0",
										"statements": []
									},
									"documentation": {
										"id": 228,
										"nodeType": "StructuredDocumentation",
										"src": "4058:183:0",
										"text": "@notice The logic for receiving a cross-chain message from a peer.\n @param message The Equito message received.\n @param messageData The data of the message received."
									},
									"id": 237,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_receiveMessageFromPeer",
									"nameLocation": "4255:23:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 234,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 231,
												"mutability": "mutable",
												"name": "message",
												"nameLocation": "4311:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 237,
												"src": "4288:30:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_EquitoMessage_$395_calldata_ptr",
													"typeString": "struct EquitoMessage"
												},
												"typeName": {
													"id": 230,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 229,
														"name": "EquitoMessage",
														"nameLocations": [
															"4288:13:0"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 395,
														"src": "4288:13:0"
													},
													"referencedDeclaration": 395,
													"src": "4288:13:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_EquitoMessage_$395_storage_ptr",
														"typeString": "struct EquitoMessage"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 233,
												"mutability": "mutable",
												"name": "messageData",
												"nameLocation": "4343:11:0",
												"nodeType": "VariableDeclaration",
												"scope": 237,
												"src": "4328:26:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 232,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4328:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4278:82:0"
									},
									"returnParameters": {
										"id": 235,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4378:0:0"
									},
									"scope": 253,
									"src": "4246:134:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 251,
										"nodeType": "Block",
										"src": "4785:53:0",
										"statements": [
											{
												"errorCall": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"expression": {
															"id": 246,
															"name": "Errors",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 516,
															"src": "4802:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_Errors_$516_$",
																"typeString": "type(library Errors)"
															}
														},
														"id": 248,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "4809:20:0",
														"memberName": "InvalidMessageSender",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 472,
														"src": "4802:27:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
															"typeString": "function () pure returns (error)"
														}
													},
													"id": 249,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4802:29:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_error",
														"typeString": "error"
													}
												},
												"id": 250,
												"nodeType": "RevertStatement",
												"src": "4795:36:0"
											}
										]
									},
									"documentation": {
										"id": 238,
										"nodeType": "StructuredDocumentation",
										"src": "4386:255:0",
										"text": "@notice The logic for receiving a cross-chain message from a non-peer.\n         The default implementation reverts the transaction.\n @param message The Equito message received.\n @param messageData The data of the message received."
									},
									"id": 252,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_receiveMessageFromNonPeer",
									"nameLocation": "4655:26:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 244,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 241,
												"mutability": "mutable",
												"name": "message",
												"nameLocation": "4714:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 252,
												"src": "4691:30:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_EquitoMessage_$395_calldata_ptr",
													"typeString": "struct EquitoMessage"
												},
												"typeName": {
													"id": 240,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 239,
														"name": "EquitoMessage",
														"nameLocations": [
															"4691:13:0"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 395,
														"src": "4691:13:0"
													},
													"referencedDeclaration": 395,
													"src": "4691:13:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_EquitoMessage_$395_storage_ptr",
														"typeString": "struct EquitoMessage"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 243,
												"mutability": "mutable",
												"name": "messageData",
												"nameLocation": "4746:11:0",
												"nodeType": "VariableDeclaration",
												"scope": 252,
												"src": "4731:26:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 242,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4731:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4681:86:0"
									},
									"returnParameters": {
										"id": 245,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4785:0:0"
									},
									"scope": 253,
									"src": "4646:192:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 254,
							"src": "557:4283:0",
							"usedErrors": [
								454,
								457,
								469,
								472,
								515,
								530,
								535
							],
							"usedEvents": [
								541
							]
						}
					],
					"src": "33:4808:0"
				},
				"id": 0
			},
			".deps/github/equito-network/equito-evm-contracts/src/interfaces/IEquitoReceiver.sol": {
				"ast": {
					"absolutePath": ".deps/github/equito-network/equito-evm-contracts/src/interfaces/IEquitoReceiver.sol",
					"exportedSymbols": {
						"EquitoMessage": [
							395
						],
						"IEquitoReceiver": [
							268
						]
					},
					"id": 269,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 255,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".23"
							],
							"nodeType": "PragmaDirective",
							"src": "33:24:1"
						},
						{
							"absolutePath": ".deps/github/equito-network/equito-evm-contracts/src/libraries/EquitoMessageLibrary.sol",
							"file": "../libraries/EquitoMessageLibrary.sol",
							"id": 257,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 269,
							"sourceUnit": 447,
							"src": "59:68:1",
							"symbolAliases": [
								{
									"foreign": {
										"id": 256,
										"name": "EquitoMessage",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 395,
										"src": "67:13:1",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IEquitoReceiver",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 258,
								"nodeType": "StructuredDocumentation",
								"src": "129:126:1",
								"text": "@title IEquitoReceiver\n @notice Interface for contracts that can receive cross-chain messages via the Router contract."
							},
							"fullyImplemented": false,
							"id": 268,
							"linearizedBaseContracts": [
								268
							],
							"name": "IEquitoReceiver",
							"nameLocation": "265:15:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 259,
										"nodeType": "StructuredDocumentation",
										"src": "287:172:1",
										"text": "@notice Receives a cross-chain message from the Router contract.\n @param message The Equito message received.\n @param messageData The data of the message."
									},
									"functionSelector": "879d182d",
									"id": 267,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "receiveMessage",
									"nameLocation": "473:14:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 265,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 262,
												"mutability": "mutable",
												"name": "message",
												"nameLocation": "520:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 267,
												"src": "497:30:1",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_EquitoMessage_$395_calldata_ptr",
													"typeString": "struct EquitoMessage"
												},
												"typeName": {
													"id": 261,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 260,
														"name": "EquitoMessage",
														"nameLocations": [
															"497:13:1"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 395,
														"src": "497:13:1"
													},
													"referencedDeclaration": 395,
													"src": "497:13:1",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_EquitoMessage_$395_storage_ptr",
														"typeString": "struct EquitoMessage"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 264,
												"mutability": "mutable",
												"name": "messageData",
												"nameLocation": "552:11:1",
												"nodeType": "VariableDeclaration",
												"scope": 267,
												"src": "537:26:1",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 263,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "537:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "487:82:1"
									},
									"returnParameters": {
										"id": 266,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "586:0:1"
									},
									"scope": 268,
									"src": "464:123:1",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 269,
							"src": "255:334:1",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "33:557:1"
				},
				"id": 1
			},
			".deps/github/equito-network/equito-evm-contracts/src/interfaces/IRouter.sol": {
				"ast": {
					"absolutePath": ".deps/github/equito-network/equito-evm-contracts/src/interfaces/IRouter.sol",
					"exportedSymbols": {
						"EquitoMessage": [
							395
						],
						"IRouter": [
							365
						],
						"bytes64": [
							373
						]
					},
					"id": 366,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 270,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".23"
							],
							"nodeType": "PragmaDirective",
							"src": "33:24:2"
						},
						{
							"absolutePath": ".deps/github/equito-network/equito-evm-contracts/src/libraries/EquitoMessageLibrary.sol",
							"file": "../libraries/EquitoMessageLibrary.sol",
							"id": 273,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 366,
							"sourceUnit": 447,
							"src": "59:77:2",
							"symbolAliases": [
								{
									"foreign": {
										"id": 271,
										"name": "bytes64",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 373,
										"src": "67:7:2",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								},
								{
									"foreign": {
										"id": 272,
										"name": "EquitoMessage",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 395,
										"src": "76:13:2",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IRouter",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 274,
								"nodeType": "StructuredDocumentation",
								"src": "138:124:2",
								"text": "@title IRouter\n @notice Interface for the Router contract, used to interact with the cross-chain messaging protocol."
							},
							"fullyImplemented": false,
							"id": 365,
							"linearizedBaseContracts": [
								365
							],
							"name": "IRouter",
							"nameLocation": "272:7:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 275,
										"nodeType": "StructuredDocumentation",
										"src": "286:169:2",
										"text": "@notice Emitted when a message send request is created.\n @param message The message being sent.\n @param messageData The data of the message being sent."
									},
									"eventSelector": "e8fb646086f78a901ffad273bf2f835a72e0d99bfc654a0a5f9eea873e6a0c32",
									"id": 282,
									"name": "MessageSendRequested",
									"nameLocation": "466:20:2",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 281,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 278,
												"indexed": false,
												"mutability": "mutable",
												"name": "message",
												"nameLocation": "501:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 282,
												"src": "487:21:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_EquitoMessage_$395_memory_ptr",
													"typeString": "struct EquitoMessage"
												},
												"typeName": {
													"id": 277,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 276,
														"name": "EquitoMessage",
														"nameLocations": [
															"487:13:2"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 395,
														"src": "487:13:2"
													},
													"referencedDeclaration": 395,
													"src": "487:13:2",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_EquitoMessage_$395_storage_ptr",
														"typeString": "struct EquitoMessage"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 280,
												"indexed": false,
												"mutability": "mutable",
												"name": "messageData",
												"nameLocation": "516:11:2",
												"nodeType": "VariableDeclaration",
												"scope": 282,
												"src": "510:17:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 279,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "510:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "486:42:2"
									},
									"src": "460:69:2"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 283,
										"nodeType": "StructuredDocumentation",
										"src": "535:106:2",
										"text": "@notice Emitted when a new verifier is added.\n @param verifier The address of the new verifier."
									},
									"eventSelector": "6d05492139c5ea989514a5d2150c028041e5c087e2a39967f67dc7d2655adb81",
									"id": 287,
									"name": "VerifierAdded",
									"nameLocation": "652:13:2",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 286,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 285,
												"indexed": true,
												"mutability": "mutable",
												"name": "verifier",
												"nameLocation": "682:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 287,
												"src": "666:24:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 284,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "666:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "665:26:2"
									},
									"src": "646:46:2"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 288,
										"nodeType": "StructuredDocumentation",
										"src": "698:166:2",
										"text": "@notice Emitted when a messages has successfully been delivered, ready to be executed.\n @param messageHash The hash of the message that has been delivered."
									},
									"eventSelector": "fa39010b12e169f2d7e9a76e381216416dbf5eb59db117ae979592ee9f323885",
									"id": 292,
									"name": "MessageDelivered",
									"nameLocation": "875:16:2",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 291,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 290,
												"indexed": false,
												"mutability": "mutable",
												"name": "messageHash",
												"nameLocation": "900:11:2",
												"nodeType": "VariableDeclaration",
												"scope": 292,
												"src": "892:19:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 289,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "892:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "891:21:2"
									},
									"src": "869:44:2"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 293,
										"nodeType": "StructuredDocumentation",
										"src": "919:141:2",
										"text": "@notice Emitted when a message has successfully been executed.\n @param messageHash The hash of the message that has been executed."
									},
									"eventSelector": "e7d1e1f435233f7a187624ac11afaf32ee0da368cef8a5625be394412f619254",
									"id": 297,
									"name": "MessageExecuted",
									"nameLocation": "1071:15:2",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 296,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 295,
												"indexed": false,
												"mutability": "mutable",
												"name": "messageHash",
												"nameLocation": "1095:11:2",
												"nodeType": "VariableDeclaration",
												"scope": 297,
												"src": "1087:19:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 294,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1087:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1086:21:2"
									},
									"src": "1065:43:2"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 298,
										"nodeType": "StructuredDocumentation",
										"src": "1114:49:2",
										"text": "@notice Emitted when the Equito fees are set."
									},
									"eventSelector": "45a9541ef904ba2e22061113303f89a6349e3f1a58b8ac0f22dd605cc77c913d",
									"id": 300,
									"name": "EquitoFeesSet",
									"nameLocation": "1174:13:2",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 299,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1187:2:2"
									},
									"src": "1168:22:2"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 301,
										"nodeType": "StructuredDocumentation",
										"src": "1196:57:2",
										"text": "@notice Event emitted when the equito address is set."
									},
									"eventSelector": "7f63ab2585aef72e130f0467fe44b74599ff1263eeb779e527ae4fbf6b5df442",
									"id": 303,
									"name": "EquitoAddressSet",
									"nameLocation": "1264:16:2",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 302,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1280:2:2"
									},
									"src": "1258:25:2"
								},
								{
									"documentation": {
										"id": 304,
										"nodeType": "StructuredDocumentation",
										"src": "1289:270:2",
										"text": "@notice Sends a cross-chain message using Equito.\n @param receiver The address of the receiver.\n @param destinationChainSelector The chain selector of the destination chain.\n @param data The message data.\n @return The hash of the message."
									},
									"functionSelector": "dc203137",
									"id": 316,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "sendMessage",
									"nameLocation": "1573:11:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 312,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 307,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "1611:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 316,
												"src": "1594:25:2",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_bytes64_$373_calldata_ptr",
													"typeString": "struct bytes64"
												},
												"typeName": {
													"id": 306,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 305,
														"name": "bytes64",
														"nameLocations": [
															"1594:7:2"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 373,
														"src": "1594:7:2"
													},
													"referencedDeclaration": 373,
													"src": "1594:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_bytes64_$373_storage_ptr",
														"typeString": "struct bytes64"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 309,
												"mutability": "mutable",
												"name": "destinationChainSelector",
												"nameLocation": "1637:24:2",
												"nodeType": "VariableDeclaration",
												"scope": 316,
												"src": "1629:32:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 308,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1629:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 311,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "1686:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 316,
												"src": "1671:19:2",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 310,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1671:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1584:112:2"
									},
									"returnParameters": {
										"id": 315,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 314,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 316,
												"src": "1723:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 313,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1723:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1722:9:2"
									},
									"scope": 365,
									"src": "1564:168:2",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 317,
										"nodeType": "StructuredDocumentation",
										"src": "1738:340:2",
										"text": "@notice Verify and execute a message with the appropriate receiver contract.\n @param message The message to be executed.\n @param messageData The data of the message to be executed.\n @param verifierIndex The index of the verifier used to verify the message.\n @param proof The proof to provide to the verifier."
									},
									"functionSelector": "f0a5704a",
									"id": 329,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "deliverAndExecuteMessage",
									"nameLocation": "2092:24:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 327,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 320,
												"mutability": "mutable",
												"name": "message",
												"nameLocation": "2149:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 329,
												"src": "2126:30:2",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_EquitoMessage_$395_calldata_ptr",
													"typeString": "struct EquitoMessage"
												},
												"typeName": {
													"id": 319,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 318,
														"name": "EquitoMessage",
														"nameLocations": [
															"2126:13:2"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 395,
														"src": "2126:13:2"
													},
													"referencedDeclaration": 395,
													"src": "2126:13:2",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_EquitoMessage_$395_storage_ptr",
														"typeString": "struct EquitoMessage"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 322,
												"mutability": "mutable",
												"name": "messageData",
												"nameLocation": "2181:11:2",
												"nodeType": "VariableDeclaration",
												"scope": 329,
												"src": "2166:26:2",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 321,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2166:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 324,
												"mutability": "mutable",
												"name": "verifierIndex",
												"nameLocation": "2210:13:2",
												"nodeType": "VariableDeclaration",
												"scope": 329,
												"src": "2202:21:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 323,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2202:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 326,
												"mutability": "mutable",
												"name": "proof",
												"nameLocation": "2248:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 329,
												"src": "2233:20:2",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 325,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2233:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2116:143:2"
									},
									"returnParameters": {
										"id": 328,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2276:0:2"
									},
									"scope": 365,
									"src": "2083:194:2",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 330,
										"nodeType": "StructuredDocumentation",
										"src": "2283:266:2",
										"text": "@notice Delivers messages to be stored for later execution.\n @param messages The list of messages to be delivered.\n @param verifierIndex The index of the verifier used to verify the messages.\n @param proof The proof provided by the verifier."
									},
									"functionSelector": "71c67f3a",
									"id": 341,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "deliverMessages",
									"nameLocation": "2563:15:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 339,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 334,
												"mutability": "mutable",
												"name": "messages",
												"nameLocation": "2613:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 341,
												"src": "2588:33:2",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_struct$_EquitoMessage_$395_calldata_ptr_$dyn_calldata_ptr",
													"typeString": "struct EquitoMessage[]"
												},
												"typeName": {
													"baseType": {
														"id": 332,
														"nodeType": "UserDefinedTypeName",
														"pathNode": {
															"id": 331,
															"name": "EquitoMessage",
															"nameLocations": [
																"2588:13:2"
															],
															"nodeType": "IdentifierPath",
															"referencedDeclaration": 395,
															"src": "2588:13:2"
														},
														"referencedDeclaration": 395,
														"src": "2588:13:2",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_EquitoMessage_$395_storage_ptr",
															"typeString": "struct EquitoMessage"
														}
													},
													"id": 333,
													"nodeType": "ArrayTypeName",
													"src": "2588:15:2",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_struct$_EquitoMessage_$395_storage_$dyn_storage_ptr",
														"typeString": "struct EquitoMessage[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 336,
												"mutability": "mutable",
												"name": "verifierIndex",
												"nameLocation": "2639:13:2",
												"nodeType": "VariableDeclaration",
												"scope": 341,
												"src": "2631:21:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 335,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2631:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 338,
												"mutability": "mutable",
												"name": "proof",
												"nameLocation": "2677:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 341,
												"src": "2662:20:2",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 337,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2662:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2578:110:2"
									},
									"returnParameters": {
										"id": 340,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2697:0:2"
									},
									"scope": 365,
									"src": "2554:144:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 342,
										"nodeType": "StructuredDocumentation",
										"src": "2704:156:2",
										"text": "@notice Executes a stored message.\n @param message The message to be executed.\n @param messageData The data of the message to be executed."
									},
									"functionSelector": "27d951e9",
									"id": 350,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "executeMessage",
									"nameLocation": "2874:14:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 348,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 345,
												"mutability": "mutable",
												"name": "message",
												"nameLocation": "2921:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 350,
												"src": "2898:30:2",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_EquitoMessage_$395_calldata_ptr",
													"typeString": "struct EquitoMessage"
												},
												"typeName": {
													"id": 344,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 343,
														"name": "EquitoMessage",
														"nameLocations": [
															"2898:13:2"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 395,
														"src": "2898:13:2"
													},
													"referencedDeclaration": 395,
													"src": "2898:13:2",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_EquitoMessage_$395_storage_ptr",
														"typeString": "struct EquitoMessage"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 347,
												"mutability": "mutable",
												"name": "messageData",
												"nameLocation": "2953:11:2",
												"nodeType": "VariableDeclaration",
												"scope": 350,
												"src": "2938:26:2",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 346,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2938:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2888:82:2"
									},
									"returnParameters": {
										"id": 349,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2987:0:2"
									},
									"scope": 365,
									"src": "2865:123:2",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 351,
										"nodeType": "StructuredDocumentation",
										"src": "2994:60:2",
										"text": "@notice Returns the chain selector of the current chain."
									},
									"functionSelector": "4e4bc847",
									"id": 356,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "chainSelector",
									"nameLocation": "3068:13:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 352,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3081:2:2"
									},
									"returnParameters": {
										"id": 355,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 354,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 356,
												"src": "3107:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 353,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3107:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3106:9:2"
									},
									"scope": 365,
									"src": "3059:57:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 357,
										"nodeType": "StructuredDocumentation",
										"src": "3122:39:2",
										"text": "@notice Returns the equito address."
									},
									"functionSelector": "2ef5c989",
									"id": 364,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "equitoAddress",
									"nameLocation": "3175:13:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 358,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3188:2:2"
									},
									"returnParameters": {
										"id": 363,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 360,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 364,
												"src": "3214:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 359,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3214:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 362,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 364,
												"src": "3223:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 361,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3223:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3213:18:2"
									},
									"scope": 365,
									"src": "3166:66:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 366,
							"src": "262:2972:2",
							"usedErrors": [],
							"usedEvents": [
								282,
								287,
								292,
								297,
								300,
								303
							]
						}
					],
					"src": "33:3202:2"
				},
				"id": 2
			},
			".deps/github/equito-network/equito-evm-contracts/src/libraries/EquitoMessageLibrary.sol": {
				"ast": {
					"absolutePath": ".deps/github/equito-network/equito-evm-contracts/src/libraries/EquitoMessageLibrary.sol",
					"exportedSymbols": {
						"EquitoMessage": [
							395
						],
						"EquitoMessageLibrary": [
							446
						],
						"bytes64": [
							373
						]
					},
					"id": 447,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 367,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".23"
							],
							"nodeType": "PragmaDirective",
							"src": "33:24:3"
						},
						{
							"canonicalName": "bytes64",
							"documentation": {
								"id": 368,
								"nodeType": "StructuredDocumentation",
								"src": "59:212:3",
								"text": "@title bytes64\n @notice A struct that holds two bytes32 values, used to store a 64-byte value.\n @dev Used to store 64-byte long values for the sender and receiver addresses in the EquitoMessage struct."
							},
							"id": 373,
							"members": [
								{
									"constant": false,
									"id": 370,
									"mutability": "mutable",
									"name": "lower",
									"nameLocation": "300:5:3",
									"nodeType": "VariableDeclaration",
									"scope": 373,
									"src": "292:13:3",
									"stateVariable": false,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 369,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "292:7:3",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 372,
									"mutability": "mutable",
									"name": "upper",
									"nameLocation": "319:5:3",
									"nodeType": "VariableDeclaration",
									"scope": 373,
									"src": "311:13:3",
									"stateVariable": false,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 371,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "311:7:3",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "internal"
								}
							],
							"name": "bytes64",
							"nameLocation": "278:7:3",
							"nodeType": "StructDefinition",
							"scope": 447,
							"src": "271:56:3",
							"visibility": "public"
						},
						{
							"canonicalName": "EquitoMessage",
							"documentation": {
								"id": 374,
								"nodeType": "StructuredDocumentation",
								"src": "329:238:3",
								"text": "@title EquitoMessage\n @notice The ubiquitous message structure for cross-chain communication, used by the Router contract to deliver and receive messages.\n @dev Designed to be used by any chain supported by the Equito protocol."
							},
							"id": 395,
							"members": [
								{
									"constant": false,
									"id": 377,
									"mutability": "mutable",
									"name": "blockNumber",
									"nameLocation": "664:11:3",
									"nodeType": "VariableDeclaration",
									"scope": 395,
									"src": "656:19:3",
									"stateVariable": false,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 376,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "656:7:3",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 380,
									"mutability": "mutable",
									"name": "sourceChainSelector",
									"nameLocation": "753:19:3",
									"nodeType": "VariableDeclaration",
									"scope": 395,
									"src": "745:27:3",
									"stateVariable": false,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 379,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "745:7:3",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 384,
									"mutability": "mutable",
									"name": "sender",
									"nameLocation": "825:6:3",
									"nodeType": "VariableDeclaration",
									"scope": 395,
									"src": "817:14:3",
									"stateVariable": false,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_struct$_bytes64_$373_storage_ptr",
										"typeString": "struct bytes64"
									},
									"typeName": {
										"id": 383,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 382,
											"name": "bytes64",
											"nameLocations": [
												"817:7:3"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 373,
											"src": "817:7:3"
										},
										"referencedDeclaration": 373,
										"src": "817:7:3",
										"typeDescriptions": {
											"typeIdentifier": "t_struct$_bytes64_$373_storage_ptr",
											"typeString": "struct bytes64"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 387,
									"mutability": "mutable",
									"name": "destinationChainSelector",
									"nameLocation": "914:24:3",
									"nodeType": "VariableDeclaration",
									"scope": 395,
									"src": "906:32:3",
									"stateVariable": false,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 386,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "906:7:3",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 391,
									"mutability": "mutable",
									"name": "receiver",
									"nameLocation": "993:8:3",
									"nodeType": "VariableDeclaration",
									"scope": 395,
									"src": "985:16:3",
									"stateVariable": false,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_struct$_bytes64_$373_storage_ptr",
										"typeString": "struct bytes64"
									},
									"typeName": {
										"id": 390,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 389,
											"name": "bytes64",
											"nameLocations": [
												"985:7:3"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 373,
											"src": "985:7:3"
										},
										"referencedDeclaration": 373,
										"src": "985:7:3",
										"typeDescriptions": {
											"typeIdentifier": "t_struct$_bytes64_$373_storage_ptr",
											"typeString": "struct bytes64"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 394,
									"mutability": "mutable",
									"name": "hashedData",
									"nameLocation": "1083:10:3",
									"nodeType": "VariableDeclaration",
									"scope": 395,
									"src": "1075:18:3",
									"stateVariable": false,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 393,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "1075:7:3",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "internal"
								}
							],
							"name": "EquitoMessage",
							"nameLocation": "574:13:3",
							"nodeType": "StructDefinition",
							"scope": 447,
							"src": "567:529:3",
							"visibility": "public"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "EquitoMessageLibrary",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 396,
								"nodeType": "StructuredDocumentation",
								"src": "1098:159:3",
								"text": "@title EquitoMessageLibrary\n @notice Library providing helper functions for EquitoMessage struct.\n @dev Contains hashing function for EquitoMessage."
							},
							"fullyImplemented": true,
							"id": 446,
							"linearizedBaseContracts": [
								446
							],
							"name": "EquitoMessageLibrary",
							"nameLocation": "1265:20:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 422,
										"nodeType": "Block",
										"src": "1609:76:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"id": 412,
																					"name": "addr",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 399,
																					"src": "1658:4:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				],
																				"id": 411,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "1650:7:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_uint160_$",
																					"typeString": "type(uint160)"
																				},
																				"typeName": {
																					"id": 410,
																					"name": "uint160",
																					"nodeType": "ElementaryTypeName",
																					"src": "1650:7:3",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 413,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "1650:13:3",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint160",
																				"typeString": "uint160"
																			}
																		],
																		"id": 409,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "1642:7:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint256_$",
																			"typeString": "type(uint256)"
																		},
																		"typeName": {
																			"id": 408,
																			"name": "uint256",
																			"nodeType": "ElementaryTypeName",
																			"src": "1642:7:3",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 414,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "1642:22:3",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 407,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1634:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_bytes32_$",
																	"typeString": "type(bytes32)"
																},
																"typeName": {
																	"id": 406,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "1634:7:3",
																	"typeDescriptions": {}
																}
															},
															"id": 415,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1634:31:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 418,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1675:1:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 417,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1667:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_bytes32_$",
																	"typeString": "type(bytes32)"
																},
																"typeName": {
																	"id": 416,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "1667:7:3",
																	"typeDescriptions": {}
																}
															},
															"id": 419,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1667:10:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 405,
														"name": "bytes64",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 373,
														"src": "1626:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_struct$_bytes64_$373_storage_ptr_$",
															"typeString": "type(struct bytes64 storage pointer)"
														}
													},
													"id": 420,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "structConstructorCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1626:52:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_bytes64_$373_memory_ptr",
														"typeString": "struct bytes64 memory"
													}
												},
												"functionReturnParameters": 404,
												"id": 421,
												"nodeType": "Return",
												"src": "1619:59:3"
											}
										]
									},
									"documentation": {
										"id": 397,
										"nodeType": "StructuredDocumentation",
										"src": "1292:233:3",
										"text": "@notice Converts an address to a bytes64 struct.\n @param addr The address to convert.\n @return The bytes64 struct containing the address.\n @dev The upper bytes32 value is set to 0. This operation cannot fail."
									},
									"id": 423,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "addressToBytes64",
									"nameLocation": "1539:16:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 400,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 399,
												"mutability": "mutable",
												"name": "addr",
												"nameLocation": "1564:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 423,
												"src": "1556:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 398,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1556:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1555:14:3"
									},
									"returnParameters": {
										"id": 404,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 403,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 423,
												"src": "1593:14:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_bytes64_$373_memory_ptr",
													"typeString": "struct bytes64"
												},
												"typeName": {
													"id": 402,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 401,
														"name": "bytes64",
														"nameLocations": [
															"1593:7:3"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 373,
														"src": "1593:7:3"
													},
													"referencedDeclaration": 373,
													"src": "1593:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_bytes64_$373_storage_ptr",
														"typeString": "struct bytes64"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1592:16:3"
									},
									"scope": 446,
									"src": "1530:155:3",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 444,
										"nodeType": "Block",
										"src": "2030:60:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"expression": {
																				"id": 438,
																				"name": "b64",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 427,
																				"src": "2071:3:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_struct$_bytes64_$373_memory_ptr",
																					"typeString": "struct bytes64 memory"
																				}
																			},
																			"id": 439,
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "2075:5:3",
																			"memberName": "lower",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 370,
																			"src": "2071:9:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		],
																		"id": 437,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2063:7:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint256_$",
																			"typeString": "type(uint256)"
																		},
																		"typeName": {
																			"id": 436,
																			"name": "uint256",
																			"nodeType": "ElementaryTypeName",
																			"src": "2063:7:3",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 440,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2063:18:3",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 435,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2055:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_uint160_$",
																	"typeString": "type(uint160)"
																},
																"typeName": {
																	"id": 434,
																	"name": "uint160",
																	"nodeType": "ElementaryTypeName",
																	"src": "2055:7:3",
																	"typeDescriptions": {}
																}
															},
															"id": 441,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2055:27:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint160",
																"typeString": "uint160"
															}
														],
														"id": 433,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "2047:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_address_$",
															"typeString": "type(address)"
														},
														"typeName": {
															"id": 432,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2047:7:3",
															"typeDescriptions": {}
														}
													},
													"id": 442,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2047:36:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 431,
												"id": 443,
												"nodeType": "Return",
												"src": "2040:43:3"
											}
										]
									},
									"documentation": {
										"id": 424,
										"nodeType": "StructuredDocumentation",
										"src": "1691:256:3",
										"text": "@notice Converts a bytes64 struct to an address.\n @param b64 The bytes64 struct to convert.\n @return The address contained in the bytes64 struct's lower bytes32.\n @dev The upper bytes32 value is ignored. This operation cannot fail."
									},
									"id": 445,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "bytes64ToAddress",
									"nameLocation": "1961:16:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 428,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 427,
												"mutability": "mutable",
												"name": "b64",
												"nameLocation": "1993:3:3",
												"nodeType": "VariableDeclaration",
												"scope": 445,
												"src": "1978:18:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_bytes64_$373_memory_ptr",
													"typeString": "struct bytes64"
												},
												"typeName": {
													"id": 426,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 425,
														"name": "bytes64",
														"nameLocations": [
															"1978:7:3"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 373,
														"src": "1978:7:3"
													},
													"referencedDeclaration": 373,
													"src": "1978:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_bytes64_$373_storage_ptr",
														"typeString": "struct bytes64"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1977:20:3"
									},
									"returnParameters": {
										"id": 431,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 430,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 445,
												"src": "2021:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 429,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2021:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2020:9:3"
									},
									"scope": 446,
									"src": "1952:138:3",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 447,
							"src": "1257:835:3",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "33:2060:3"
				},
				"id": 3
			},
			".deps/github/equito-network/equito-evm-contracts/src/libraries/Errors.sol": {
				"ast": {
					"absolutePath": ".deps/github/equito-network/equito-evm-contracts/src/libraries/Errors.sol",
					"exportedSymbols": {
						"Errors": [
							516
						]
					},
					"id": 517,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 448,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".23"
							],
							"nodeType": "PragmaDirective",
							"src": "33:24:4"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Errors",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 449,
								"nodeType": "StructuredDocumentation",
								"src": "59:90:4",
								"text": "@title Errors\n @notice Defines all error messages used in the EquitoApp contracts."
							},
							"fullyImplemented": true,
							"id": 516,
							"linearizedBaseContracts": [
								516
							],
							"name": "Errors",
							"nameLocation": "157:6:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 450,
										"nodeType": "StructuredDocumentation",
										"src": "170:125:4",
										"text": "@notice Thrown when the router address is invalid.\n @param router The address of the router that caused the error."
									},
									"errorSelector": "d7f73334",
									"id": 454,
									"name": "InvalidRouter",
									"nameLocation": "306:13:4",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 453,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 452,
												"mutability": "mutable",
												"name": "router",
												"nameLocation": "328:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 454,
												"src": "320:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 451,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "320:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "319:16:4"
									},
									"src": "300:36:4"
								},
								{
									"documentation": {
										"id": 455,
										"nodeType": "StructuredDocumentation",
										"src": "342:51:4",
										"text": "@notice Thrown when the router address is zero."
									},
									"errorSelector": "50082683",
									"id": 457,
									"name": "RouterAddressCannotBeZero",
									"nameLocation": "404:25:4",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 456,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "429:2:4"
									},
									"src": "398:34:4"
								},
								{
									"documentation": {
										"id": 458,
										"nodeType": "StructuredDocumentation",
										"src": "438:68:4",
										"text": "@notice Thrown when the proof for verifying messages is invalid."
									},
									"errorSelector": "b64d2f31",
									"id": 460,
									"name": "InvalidMessagesProof",
									"nameLocation": "517:20:4",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 459,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "537:2:4"
									},
									"src": "511:29:4"
								},
								{
									"documentation": {
										"id": 461,
										"nodeType": "StructuredDocumentation",
										"src": "546:69:4",
										"text": "@notice Thrown when the verifier index provided is out of bounds."
									},
									"errorSelector": "04f7d7f1",
									"id": 463,
									"name": "InvalidVerifierIndex",
									"nameLocation": "626:20:4",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 462,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "646:2:4"
									},
									"src": "620:29:4"
								},
								{
									"documentation": {
										"id": 464,
										"nodeType": "StructuredDocumentation",
										"src": "655:89:4",
										"text": "@notice Thrown when the initial verifier address provided in the constructor is zero."
									},
									"errorSelector": "e6ecef12",
									"id": 466,
									"name": "InitialVerifierZeroAddress",
									"nameLocation": "755:26:4",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 465,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "781:2:4"
									},
									"src": "749:35:4"
								},
								{
									"documentation": {
										"id": 467,
										"nodeType": "StructuredDocumentation",
										"src": "790:58:4",
										"text": "@notice Thrown when the lengths of arrays are invalid."
									},
									"errorSelector": "947d5a84",
									"id": 469,
									"name": "InvalidLength",
									"nameLocation": "859:13:4",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 468,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "872:2:4"
									},
									"src": "853:22:4"
								},
								{
									"documentation": {
										"id": 470,
										"nodeType": "StructuredDocumentation",
										"src": "881:59:4",
										"text": "@notice Thrown when the sender of a message is invalid."
									},
									"errorSelector": "7fee69a1",
									"id": 472,
									"name": "InvalidMessageSender",
									"nameLocation": "951:20:4",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 471,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "971:2:4"
									},
									"src": "945:29:4"
								},
								{
									"documentation": {
										"id": 473,
										"nodeType": "StructuredDocumentation",
										"src": "980:84:4",
										"text": "@notice Thrown when the provided fee is insufficient to cover the required cost."
									},
									"errorSelector": "025dbdd4",
									"id": 475,
									"name": "InsufficientFee",
									"nameLocation": "1075:15:4",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 474,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1090:2:4"
									},
									"src": "1069:24:4"
								},
								{
									"documentation": {
										"id": 476,
										"nodeType": "StructuredDocumentation",
										"src": "1099:86:4",
										"text": "@notice Thrown when the amount of ether sent with the transaction is insufficient."
									},
									"errorSelector": "a5fb6be9",
									"id": 478,
									"name": "InsufficientValueSent",
									"nameLocation": "1196:21:4",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 477,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1217:2:4"
									},
									"src": "1190:30:4"
								},
								{
									"documentation": {
										"id": 479,
										"nodeType": "StructuredDocumentation",
										"src": "1226:67:4",
										"text": "@notice Thrown when the provided cost is not greater than zero."
									},
									"errorSelector": "bf908dba",
									"id": 481,
									"name": "CostMustBeGreaterThanZero",
									"nameLocation": "1304:25:4",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 480,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1329:2:4"
									},
									"src": "1298:34:4"
								},
								{
									"documentation": {
										"id": 482,
										"nodeType": "StructuredDocumentation",
										"src": "1338:85:4",
										"text": "@notice Thrown when the token price retrieved from the oracle is invalid or zero."
									},
									"errorSelector": "bcf09f96",
									"id": 484,
									"name": "InvalidTokenPriceFromOracle",
									"nameLocation": "1434:27:4",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 483,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1461:2:4"
									},
									"src": "1428:36:4"
								},
								{
									"documentation": {
										"id": 485,
										"nodeType": "StructuredDocumentation",
										"src": "1470:80:4",
										"text": "@notice Thrown when a message is received from an invalid sovereign account."
									},
									"errorSelector": "b778be3a",
									"id": 487,
									"name": "InvalidSovereign",
									"nameLocation": "1561:16:4",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 486,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1577:2:4"
									},
									"src": "1555:25:4"
								},
								{
									"documentation": {
										"id": 488,
										"nodeType": "StructuredDocumentation",
										"src": "1586:89:4",
										"text": "@notice Thrown when an invalid operation code is encountered in the received message."
									},
									"errorSelector": "398d4d32",
									"id": 490,
									"name": "InvalidOperation",
									"nameLocation": "1686:16:4",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 489,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1702:2:4"
									},
									"src": "1680:25:4"
								},
								{
									"documentation": {
										"id": 491,
										"nodeType": "StructuredDocumentation",
										"src": "1711:74:4",
										"text": "@notice Thrown when an invalid liquidity provider address is provided."
									},
									"errorSelector": "02d12165",
									"id": 493,
									"name": "InvalidLiquidityProvider",
									"nameLocation": "1796:24:4",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 492,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1820:2:4"
									},
									"src": "1790:33:4"
								},
								{
									"documentation": {
										"id": 494,
										"nodeType": "StructuredDocumentation",
										"src": "1829:75:4",
										"text": "@notice Thrown when a transfer of fees to the liquidity provider fails."
									},
									"errorSelector": "90b8ec18",
									"id": 496,
									"name": "TransferFailed",
									"nameLocation": "1915:14:4",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 495,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1929:2:4"
									},
									"src": "1909:23:4"
								},
								{
									"documentation": {
										"id": 497,
										"nodeType": "StructuredDocumentation",
										"src": "1938:77:4",
										"text": "@notice Thrown when there is a mismatch in session IDs during validation."
									},
									"errorSelector": "ce2a8c60",
									"id": 499,
									"name": "SessionIdMismatch",
									"nameLocation": "2026:17:4",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 498,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2043:2:4"
									},
									"src": "2020:26:4"
								},
								{
									"documentation": {
										"id": 500,
										"nodeType": "StructuredDocumentation",
										"src": "2052:84:4",
										"text": "@notice Thrown when attempting to set the router, but the router is already set."
									},
									"errorSelector": "a9112be0",
									"id": 502,
									"name": "RouterAlreadySet",
									"nameLocation": "2147:16:4",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 501,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2163:2:4"
									},
									"src": "2141:25:4"
								},
								{
									"documentation": {
										"id": 503,
										"nodeType": "StructuredDocumentation",
										"src": "2172:64:4",
										"text": "@notice Thrown when an invalid sender is calling a function."
									},
									"errorSelector": "4c14f64c",
									"id": 507,
									"name": "InvalidSender",
									"nameLocation": "2247:13:4",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 506,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 505,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "2269:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 507,
												"src": "2261:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 504,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2261:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2260:16:4"
									},
									"src": "2241:36:4"
								},
								{
									"documentation": {
										"id": 508,
										"nodeType": "StructuredDocumentation",
										"src": "2283:83:4",
										"text": "@notice Thrown when the provided session ID does not match the current session."
									},
									"errorSelector": "2e4937ae",
									"id": 510,
									"name": "InvalidSessionId",
									"nameLocation": "2377:16:4",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 509,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2393:2:4"
									},
									"src": "2371:25:4"
								},
								{
									"documentation": {
										"id": 511,
										"nodeType": "StructuredDocumentation",
										"src": "2402:180:4",
										"text": "@notice Thrown when a Peer address is not found in the mapping, given a chain selector.\n @param chainSelector The chain selector for which the peer address is requested."
									},
									"errorSelector": "78d0dbfc",
									"id": 515,
									"name": "InvalidPeer",
									"nameLocation": "2593:11:4",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 514,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 513,
												"mutability": "mutable",
												"name": "chainSelector",
												"nameLocation": "2613:13:4",
												"nodeType": "VariableDeclaration",
												"scope": 515,
												"src": "2605:21:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 512,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2605:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2604:23:4"
									},
									"src": "2587:41:4"
								}
							],
							"scope": 517,
							"src": "149:2481:4",
							"usedErrors": [
								454,
								457,
								460,
								463,
								466,
								469,
								472,
								475,
								478,
								481,
								484,
								487,
								490,
								493,
								496,
								499,
								502,
								507,
								510,
								515
							],
							"usedEvents": []
						}
					],
					"src": "33:2598:4"
				},
				"id": 4
			},
			"@openzeppelin/contracts/access/Ownable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
					"exportedSymbols": {
						"Context": [
							694
						],
						"Ownable": [
							664
						]
					},
					"id": 665,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 518,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "102:24:5"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
							"file": "../utils/Context.sol",
							"id": 520,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 665,
							"sourceUnit": 695,
							"src": "128:45:5",
							"symbolAliases": [
								{
									"foreign": {
										"id": 519,
										"name": "Context",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 694,
										"src": "136:7:5",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 522,
										"name": "Context",
										"nameLocations": [
											"692:7:5"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 694,
										"src": "692:7:5"
									},
									"id": 523,
									"nodeType": "InheritanceSpecifier",
									"src": "692:7:5"
								}
							],
							"canonicalName": "Ownable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 521,
								"nodeType": "StructuredDocumentation",
								"src": "175:487:5",
								"text": " @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n The initial owner is set to the address provided by the deployer. This can\n later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."
							},
							"fullyImplemented": true,
							"id": 664,
							"linearizedBaseContracts": [
								664,
								694
							],
							"name": "Ownable",
							"nameLocation": "681:7:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 525,
									"mutability": "mutable",
									"name": "_owner",
									"nameLocation": "722:6:5",
									"nodeType": "VariableDeclaration",
									"scope": 664,
									"src": "706:22:5",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 524,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "706:7:5",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "private"
								},
								{
									"documentation": {
										"id": 526,
										"nodeType": "StructuredDocumentation",
										"src": "735:85:5",
										"text": " @dev The caller account is not authorized to perform an operation."
									},
									"errorSelector": "118cdaa7",
									"id": 530,
									"name": "OwnableUnauthorizedAccount",
									"nameLocation": "831:26:5",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 529,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 528,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "866:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 530,
												"src": "858:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 527,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "858:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "857:17:5"
									},
									"src": "825:50:5"
								},
								{
									"documentation": {
										"id": 531,
										"nodeType": "StructuredDocumentation",
										"src": "881:82:5",
										"text": " @dev The owner is not a valid owner account. (eg. `address(0)`)"
									},
									"errorSelector": "1e4fbdf7",
									"id": 535,
									"name": "OwnableInvalidOwner",
									"nameLocation": "974:19:5",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 534,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 533,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1002:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 535,
												"src": "994:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 532,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "994:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "993:15:5"
									},
									"src": "968:41:5"
								},
								{
									"anonymous": false,
									"eventSelector": "8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
									"id": 541,
									"name": "OwnershipTransferred",
									"nameLocation": "1021:20:5",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 540,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 537,
												"indexed": true,
												"mutability": "mutable",
												"name": "previousOwner",
												"nameLocation": "1058:13:5",
												"nodeType": "VariableDeclaration",
												"scope": 541,
												"src": "1042:29:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 536,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1042:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 539,
												"indexed": true,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "1089:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 541,
												"src": "1073:24:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 538,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1073:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1041:57:5"
									},
									"src": "1015:84:5"
								},
								{
									"body": {
										"id": 566,
										"nodeType": "Block",
										"src": "1259:153:5",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 552,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 547,
														"name": "initialOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 544,
														"src": "1273:12:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 550,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1297:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 549,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "1289:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 548,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "1289:7:5",
																"typeDescriptions": {}
															}
														},
														"id": 551,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1289:10:5",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1273:26:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 561,
												"nodeType": "IfStatement",
												"src": "1269:95:5",
												"trueBody": {
													"id": 560,
													"nodeType": "Block",
													"src": "1301:63:5",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 556,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "1350:1:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 555,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "1342:7:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 554,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "1342:7:5",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 557,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "1342:10:5",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 553,
																	"name": "OwnableInvalidOwner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 535,
																	"src": "1322:19:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 558,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1322:31:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 559,
															"nodeType": "RevertStatement",
															"src": "1315:38:5"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 563,
															"name": "initialOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 544,
															"src": "1392:12:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 562,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 663,
														"src": "1373:18:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 564,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1373:32:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 565,
												"nodeType": "ExpressionStatement",
												"src": "1373:32:5"
											}
										]
									},
									"documentation": {
										"id": 542,
										"nodeType": "StructuredDocumentation",
										"src": "1105:115:5",
										"text": " @dev Initializes the contract setting the address provided by the deployer as the initial owner."
									},
									"id": 567,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 545,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 544,
												"mutability": "mutable",
												"name": "initialOwner",
												"nameLocation": "1245:12:5",
												"nodeType": "VariableDeclaration",
												"scope": 567,
												"src": "1237:20:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 543,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1237:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1236:22:5"
									},
									"returnParameters": {
										"id": 546,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1259:0:5"
									},
									"scope": 664,
									"src": "1225:187:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 574,
										"nodeType": "Block",
										"src": "1521:41:5",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 570,
														"name": "_checkOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 601,
														"src": "1531:11:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 571,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1531:13:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 572,
												"nodeType": "ExpressionStatement",
												"src": "1531:13:5"
											},
											{
												"id": 573,
												"nodeType": "PlaceholderStatement",
												"src": "1554:1:5"
											}
										]
									},
									"documentation": {
										"id": 568,
										"nodeType": "StructuredDocumentation",
										"src": "1418:77:5",
										"text": " @dev Throws if called by any account other than the owner."
									},
									"id": 575,
									"name": "onlyOwner",
									"nameLocation": "1509:9:5",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 569,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1518:2:5"
									},
									"src": "1500:62:5",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 583,
										"nodeType": "Block",
										"src": "1693:30:5",
										"statements": [
											{
												"expression": {
													"id": 581,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 525,
													"src": "1710:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 580,
												"id": 582,
												"nodeType": "Return",
												"src": "1703:13:5"
											}
										]
									},
									"documentation": {
										"id": 576,
										"nodeType": "StructuredDocumentation",
										"src": "1568:65:5",
										"text": " @dev Returns the address of the current owner."
									},
									"functionSelector": "8da5cb5b",
									"id": 584,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nameLocation": "1647:5:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 577,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1652:2:5"
									},
									"returnParameters": {
										"id": 580,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 579,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 584,
												"src": "1684:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 578,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1684:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1683:9:5"
									},
									"scope": 664,
									"src": "1638:85:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 600,
										"nodeType": "Block",
										"src": "1841:117:5",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 592,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 588,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 584,
															"src": "1855:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																"typeString": "function () view returns (address)"
															}
														},
														"id": 589,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1855:7:5",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 590,
															"name": "_msgSender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 676,
															"src": "1866:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																"typeString": "function () view returns (address)"
															}
														},
														"id": 591,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1866:12:5",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1855:23:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 599,
												"nodeType": "IfStatement",
												"src": "1851:101:5",
												"trueBody": {
													"id": 598,
													"nodeType": "Block",
													"src": "1880:72:5",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"id": 594,
																			"name": "_msgSender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 676,
																			"src": "1928:10:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																				"typeString": "function () view returns (address)"
																			}
																		},
																		"id": 595,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "1928:12:5",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 593,
																	"name": "OwnableUnauthorizedAccount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 530,
																	"src": "1901:26:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 596,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1901:40:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 597,
															"nodeType": "RevertStatement",
															"src": "1894:47:5"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 585,
										"nodeType": "StructuredDocumentation",
										"src": "1729:62:5",
										"text": " @dev Throws if the sender is not the owner."
									},
									"id": 601,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkOwner",
									"nameLocation": "1805:11:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 586,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1816:2:5"
									},
									"returnParameters": {
										"id": 587,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1841:0:5"
									},
									"scope": 664,
									"src": "1796:162:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 614,
										"nodeType": "Block",
										"src": "2347:47:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 610,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2384:1:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 609,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2376:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 608,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "2376:7:5",
																	"typeDescriptions": {}
																}
															},
															"id": 611,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2376:10:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 607,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 663,
														"src": "2357:18:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 612,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2357:30:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 613,
												"nodeType": "ExpressionStatement",
												"src": "2357:30:5"
											}
										]
									},
									"documentation": {
										"id": 602,
										"nodeType": "StructuredDocumentation",
										"src": "1964:324:5",
										"text": " @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby disabling any functionality that is only available to the owner."
									},
									"functionSelector": "715018a6",
									"id": 615,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 605,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 604,
												"name": "onlyOwner",
												"nameLocations": [
													"2337:9:5"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 575,
												"src": "2337:9:5"
											},
											"nodeType": "ModifierInvocation",
											"src": "2337:9:5"
										}
									],
									"name": "renounceOwnership",
									"nameLocation": "2302:17:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 603,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2319:2:5"
									},
									"returnParameters": {
										"id": 606,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2347:0:5"
									},
									"scope": 664,
									"src": "2293:101:5",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 642,
										"nodeType": "Block",
										"src": "2613:145:5",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 628,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 623,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 618,
														"src": "2627:8:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 626,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2647:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 625,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "2639:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 624,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "2639:7:5",
																"typeDescriptions": {}
															}
														},
														"id": 627,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2639:10:5",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2627:22:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 637,
												"nodeType": "IfStatement",
												"src": "2623:91:5",
												"trueBody": {
													"id": 636,
													"nodeType": "Block",
													"src": "2651:63:5",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 632,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "2700:1:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 631,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "2692:7:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 630,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "2692:7:5",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 633,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "2692:10:5",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 629,
																	"name": "OwnableInvalidOwner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 535,
																	"src": "2672:19:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 634,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2672:31:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 635,
															"nodeType": "RevertStatement",
															"src": "2665:38:5"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 639,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 618,
															"src": "2742:8:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 638,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 663,
														"src": "2723:18:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 640,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2723:28:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 641,
												"nodeType": "ExpressionStatement",
												"src": "2723:28:5"
											}
										]
									},
									"documentation": {
										"id": 616,
										"nodeType": "StructuredDocumentation",
										"src": "2400:138:5",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."
									},
									"functionSelector": "f2fde38b",
									"id": 643,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 621,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 620,
												"name": "onlyOwner",
												"nameLocations": [
													"2603:9:5"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 575,
												"src": "2603:9:5"
											},
											"nodeType": "ModifierInvocation",
											"src": "2603:9:5"
										}
									],
									"name": "transferOwnership",
									"nameLocation": "2552:17:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 619,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 618,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2578:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 643,
												"src": "2570:16:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 617,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2570:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2569:18:5"
									},
									"returnParameters": {
										"id": 622,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2613:0:5"
									},
									"scope": 664,
									"src": "2543:215:5",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 662,
										"nodeType": "Block",
										"src": "2975:124:5",
										"statements": [
											{
												"assignments": [
													650
												],
												"declarations": [
													{
														"constant": false,
														"id": 650,
														"mutability": "mutable",
														"name": "oldOwner",
														"nameLocation": "2993:8:5",
														"nodeType": "VariableDeclaration",
														"scope": 662,
														"src": "2985:16:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 649,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2985:7:5",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 652,
												"initialValue": {
													"id": 651,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 525,
													"src": "3004:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2985:25:5"
											},
											{
												"expression": {
													"id": 655,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 653,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 525,
														"src": "3020:6:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 654,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 646,
														"src": "3029:8:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "3020:17:5",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 656,
												"nodeType": "ExpressionStatement",
												"src": "3020:17:5"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 658,
															"name": "oldOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 650,
															"src": "3073:8:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 659,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 646,
															"src": "3083:8:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 657,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 541,
														"src": "3052:20:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 660,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3052:40:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 661,
												"nodeType": "EmitStatement",
												"src": "3047:45:5"
											}
										]
									},
									"documentation": {
										"id": 644,
										"nodeType": "StructuredDocumentation",
										"src": "2764:143:5",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."
									},
									"id": 663,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transferOwnership",
									"nameLocation": "2921:18:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 647,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 646,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2948:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 663,
												"src": "2940:16:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 645,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2940:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2939:18:5"
									},
									"returnParameters": {
										"id": 648,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2975:0:5"
									},
									"scope": 664,
									"src": "2912:187:5",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 665,
							"src": "663:2438:5",
							"usedErrors": [
								530,
								535
							],
							"usedEvents": [
								541
							]
						}
					],
					"src": "102:3000:5"
				},
				"id": 5
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
					"exportedSymbols": {
						"Context": [
							694
						]
					},
					"id": 695,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 666,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "101:24:6"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "Context",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 667,
								"nodeType": "StructuredDocumentation",
								"src": "127:496:6",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 694,
							"linearizedBaseContracts": [
								694
							],
							"name": "Context",
							"nameLocation": "642:7:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 675,
										"nodeType": "Block",
										"src": "718:34:6",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 672,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "735:3:6",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 673,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "739:6:6",
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "735:10:6",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 671,
												"id": 674,
												"nodeType": "Return",
												"src": "728:17:6"
											}
										]
									},
									"id": 676,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nameLocation": "665:10:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 668,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "675:2:6"
									},
									"returnParameters": {
										"id": 671,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 670,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 676,
												"src": "709:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 669,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "709:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "708:9:6"
									},
									"scope": 694,
									"src": "656:96:6",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 684,
										"nodeType": "Block",
										"src": "825:32:6",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 681,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "842:3:6",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 682,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "846:4:6",
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "842:8:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 680,
												"id": 683,
												"nodeType": "Return",
												"src": "835:15:6"
											}
										]
									},
									"id": 685,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nameLocation": "767:8:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 677,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "775:2:6"
									},
									"returnParameters": {
										"id": 680,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 679,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 685,
												"src": "809:14:6",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 678,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "809:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "808:16:6"
									},
									"scope": 694,
									"src": "758:99:6",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 692,
										"nodeType": "Block",
										"src": "935:25:6",
										"statements": [
											{
												"expression": {
													"hexValue": "30",
													"id": 690,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "952:1:6",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"functionReturnParameters": 689,
												"id": 691,
												"nodeType": "Return",
												"src": "945:8:6"
											}
										]
									},
									"id": 693,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_contextSuffixLength",
									"nameLocation": "872:20:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 686,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "892:2:6"
									},
									"returnParameters": {
										"id": 689,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 688,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 693,
												"src": "926:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 687,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "926:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "925:9:6"
									},
									"scope": 694,
									"src": "863:97:6",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 695,
							"src": "624:338:6",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "101:862:6"
				},
				"id": 6
			}
		}
	}
}