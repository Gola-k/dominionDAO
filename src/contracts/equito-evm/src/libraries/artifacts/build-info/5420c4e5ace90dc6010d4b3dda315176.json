{
	"id": "5420c4e5ace90dc6010d4b3dda315176",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.26",
	"solcLongVersion": "0.8.26+commit.8a97fa7a",
	"input": {
		"language": "Solidity",
		"sources": {
			".deps/github/equito-network/equito-evm-contracts/src/libraries/Errors.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.23;\n\n/// @title Errors\n/// @notice Defines all error messages used in the EquitoApp contracts.\nlibrary Errors {\n    /// @notice Thrown when the router address is invalid.\n    /// @param router The address of the router that caused the error.\n    error InvalidRouter(address router);\n\n    /// @notice Thrown when the router address is zero.\n    error RouterAddressCannotBeZero();\n\n    /// @notice Thrown when the proof for verifying messages is invalid.\n    error InvalidMessagesProof();\n\n    /// @notice Thrown when the verifier index provided is out of bounds.\n    error InvalidVerifierIndex();\n\n    /// @notice Thrown when the initial verifier address provided in the constructor is zero.\n    error InitialVerifierZeroAddress();\n\n    /// @notice Thrown when the lengths of arrays are invalid.\n    error InvalidLength();\n\n    /// @notice Thrown when the sender of a message is invalid.\n    error InvalidMessageSender();\n\n    /// @notice Thrown when the provided fee is insufficient to cover the required cost.\n    error InsufficientFee();\n\n    /// @notice Thrown when the amount of ether sent with the transaction is insufficient.\n    error InsufficientValueSent();\n\n    /// @notice Thrown when the provided cost is not greater than zero.\n    error CostMustBeGreaterThanZero();\n\n    /// @notice Thrown when the token price retrieved from the oracle is invalid or zero.\n    error InvalidTokenPriceFromOracle();\n\n    /// @notice Thrown when a message is received from an invalid sovereign account.\n    error InvalidSovereign();\n\n    /// @notice Thrown when an invalid operation code is encountered in the received message.\n    error InvalidOperation();\n\n    /// @notice Thrown when an invalid liquidity provider address is provided.\n    error InvalidLiquidityProvider();\n\n    /// @notice Thrown when a transfer of fees to the liquidity provider fails.\n    error TransferFailed();\n\n    /// @notice Thrown when there is a mismatch in session IDs during validation.\n    error SessionIdMismatch();\n\n    /// @notice Thrown when attempting to set the router, but the router is already set.\n    error RouterAlreadySet();\n\n    /// @notice Thrown when an invalid sender is calling a function.\n    error InvalidSender(address sender);\n\n    /// @notice Thrown when the provided session ID does not match the current session.\n    error InvalidSessionId();\n\n    /// @notice Thrown when a Peer address is not found in the mapping, given a chain selector.\n    /// @param chainSelector The chain selector for which the peer address is requested.\n    error InvalidPeer(uint256 chainSelector);\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": []
		}
	},
	"output": {
		"contracts": {
			".deps/github/equito-network/equito-evm-contracts/src/libraries/Errors.sol": {
				"Errors": {
					"abi": [
						{
							"inputs": [],
							"name": "CostMustBeGreaterThanZero",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InitialVerifierZeroAddress",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InsufficientFee",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InsufficientValueSent",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InvalidLength",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InvalidLiquidityProvider",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InvalidMessageSender",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InvalidMessagesProof",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InvalidOperation",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "chainSelector",
									"type": "uint256"
								}
							],
							"name": "InvalidPeer",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "router",
									"type": "address"
								}
							],
							"name": "InvalidRouter",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "InvalidSender",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InvalidSessionId",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InvalidSovereign",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InvalidTokenPriceFromOracle",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InvalidVerifierIndex",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "RouterAddressCannotBeZero",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "RouterAlreadySet",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "SessionIdMismatch",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "TransferFailed",
							"type": "error"
						}
					],
					"devdoc": {
						"errors": {
							"InvalidPeer(uint256)": [
								{
									"params": {
										"chainSelector": "The chain selector for which the peer address is requested."
									}
								}
							],
							"InvalidRouter(address)": [
								{
									"params": {
										"router": "The address of the router that caused the error."
									}
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"title": "Errors",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \".deps/github/equito-network/equito-evm-contracts/src/libraries/Errors.sol\":149:2630  library Errors {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \".deps/github/equito-network/equito-evm-contracts/src/libraries/Errors.sol\":149:2630  library Errors {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212206308ce181b19c2007b1e8157ce6ac1066d9ea8f37c4535567bc4d0579f03c33664736f6c634300081a0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6055604b600b8282823980515f1a607314603f577f4e487b71000000000000000000000000000000000000000000000000000000005f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea26469706673582212206308ce181b19c2007b1e8157ce6ac1066d9ea8f37c4535567bc4d0579f03c33664736f6c634300081a0033",
							"opcodes": "PUSH1 0x55 PUSH1 0x4B PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x3F JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH4 0x8CE181B NOT 0xC2 STOP PUSH28 0x1E8157CE6AC1066D9EA8F37C4535567BC4D0579F03C33664736F6C63 NUMBER STOP ADDMOD BYTE STOP CALLER ",
							"sourceMap": "149:2481:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "730000000000000000000000000000000000000000301460806040525f80fdfea26469706673582212206308ce181b19c2007b1e8157ce6ac1066d9ea8f37c4535567bc4d0579f03c33664736f6c634300081a0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH4 0x8CE181B NOT 0xC2 STOP PUSH28 0x1E8157CE6AC1066D9EA8F37C4535567BC4D0579F03C33664736F6C63 NUMBER STOP ADDMOD BYTE STOP CALLER ",
							"sourceMap": "149:2481:0:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17000",
								"executionCost": "92",
								"totalCost": "17092"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 149,
									"end": 2630,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 149,
									"end": 2630,
									"name": "PUSH [$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 149,
									"end": 2630,
									"name": "PUSH",
									"source": 0,
									"value": "B"
								},
								{
									"begin": 149,
									"end": 2630,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 149,
									"end": 2630,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 149,
									"end": 2630,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 149,
									"end": 2630,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 149,
									"end": 2630,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 149,
									"end": 2630,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 149,
									"end": 2630,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 149,
									"end": 2630,
									"name": "BYTE",
									"source": 0
								},
								{
									"begin": 149,
									"end": 2630,
									"name": "PUSH",
									"source": 0,
									"value": "73"
								},
								{
									"begin": 149,
									"end": 2630,
									"name": "EQ",
									"source": 0
								},
								{
									"begin": 149,
									"end": 2630,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 149,
									"end": 2630,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 149,
									"end": 2630,
									"name": "PUSH",
									"source": 0,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 149,
									"end": 2630,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 149,
									"end": 2630,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 149,
									"end": 2630,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 149,
									"end": 2630,
									"name": "PUSH",
									"source": 0,
									"value": "4"
								},
								{
									"begin": 149,
									"end": 2630,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 149,
									"end": 2630,
									"name": "PUSH",
									"source": 0,
									"value": "24"
								},
								{
									"begin": 149,
									"end": 2630,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 149,
									"end": 2630,
									"name": "REVERT",
									"source": 0
								},
								{
									"begin": 149,
									"end": 2630,
									"name": "tag",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 149,
									"end": 2630,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 149,
									"end": 2630,
									"name": "ADDRESS",
									"source": 0
								},
								{
									"begin": 149,
									"end": 2630,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 149,
									"end": 2630,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 149,
									"end": 2630,
									"name": "PUSH",
									"source": 0,
									"value": "73"
								},
								{
									"begin": 149,
									"end": 2630,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 149,
									"end": 2630,
									"name": "MSTORE8",
									"source": 0
								},
								{
									"begin": 149,
									"end": 2630,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 149,
									"end": 2630,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 149,
									"end": 2630,
									"name": "RETURN",
									"source": 0
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212206308ce181b19c2007b1e8157ce6ac1066d9ea8f37c4535567bc4d0579f03c33664736f6c634300081a0033",
									".code": [
										{
											"begin": 149,
											"end": 2630,
											"name": "PUSHDEPLOYADDRESS",
											"source": 0
										},
										{
											"begin": 149,
											"end": 2630,
											"name": "ADDRESS",
											"source": 0
										},
										{
											"begin": 149,
											"end": 2630,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 149,
											"end": 2630,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 149,
											"end": 2630,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 149,
											"end": 2630,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 149,
											"end": 2630,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 149,
											"end": 2630,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 149,
											"end": 2630,
											"name": "REVERT",
											"source": 0
										}
									]
								}
							},
							"sourceList": [
								".deps/github/equito-network/equito-evm-contracts/src/libraries/Errors.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"CostMustBeGreaterThanZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InitialVerifierZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientFee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientValueSent\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidLiquidityProvider\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMessageSender\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMessagesProof\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidOperation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainSelector\",\"type\":\"uint256\"}],\"name\":\"InvalidPeer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"InvalidRouter\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"InvalidSender\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSessionId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSovereign\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTokenPriceFromOracle\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidVerifierIndex\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RouterAddressCannotBeZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RouterAlreadySet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SessionIdMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"}],\"devdoc\":{\"errors\":{\"InvalidPeer(uint256)\":[{\"params\":{\"chainSelector\":\"The chain selector for which the peer address is requested.\"}}],\"InvalidRouter(address)\":[{\"params\":{\"router\":\"The address of the router that caused the error.\"}}]},\"kind\":\"dev\",\"methods\":{},\"title\":\"Errors\",\"version\":1},\"userdoc\":{\"errors\":{\"CostMustBeGreaterThanZero()\":[{\"notice\":\"Thrown when the provided cost is not greater than zero.\"}],\"InitialVerifierZeroAddress()\":[{\"notice\":\"Thrown when the initial verifier address provided in the constructor is zero.\"}],\"InsufficientFee()\":[{\"notice\":\"Thrown when the provided fee is insufficient to cover the required cost.\"}],\"InsufficientValueSent()\":[{\"notice\":\"Thrown when the amount of ether sent with the transaction is insufficient.\"}],\"InvalidLength()\":[{\"notice\":\"Thrown when the lengths of arrays are invalid.\"}],\"InvalidLiquidityProvider()\":[{\"notice\":\"Thrown when an invalid liquidity provider address is provided.\"}],\"InvalidMessageSender()\":[{\"notice\":\"Thrown when the sender of a message is invalid.\"}],\"InvalidMessagesProof()\":[{\"notice\":\"Thrown when the proof for verifying messages is invalid.\"}],\"InvalidOperation()\":[{\"notice\":\"Thrown when an invalid operation code is encountered in the received message.\"}],\"InvalidPeer(uint256)\":[{\"notice\":\"Thrown when a Peer address is not found in the mapping, given a chain selector.\"}],\"InvalidRouter(address)\":[{\"notice\":\"Thrown when the router address is invalid.\"}],\"InvalidSender(address)\":[{\"notice\":\"Thrown when an invalid sender is calling a function.\"}],\"InvalidSessionId()\":[{\"notice\":\"Thrown when the provided session ID does not match the current session.\"}],\"InvalidSovereign()\":[{\"notice\":\"Thrown when a message is received from an invalid sovereign account.\"}],\"InvalidTokenPriceFromOracle()\":[{\"notice\":\"Thrown when the token price retrieved from the oracle is invalid or zero.\"}],\"InvalidVerifierIndex()\":[{\"notice\":\"Thrown when the verifier index provided is out of bounds.\"}],\"RouterAddressCannotBeZero()\":[{\"notice\":\"Thrown when the router address is zero.\"}],\"RouterAlreadySet()\":[{\"notice\":\"Thrown when attempting to set the router, but the router is already set.\"}],\"SessionIdMismatch()\":[{\"notice\":\"Thrown when there is a mismatch in session IDs during validation.\"}],\"TransferFailed()\":[{\"notice\":\"Thrown when a transfer of fees to the liquidity provider fails.\"}]},\"kind\":\"user\",\"methods\":{},\"notice\":\"Defines all error messages used in the EquitoApp contracts.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\".deps/github/equito-network/equito-evm-contracts/src/libraries/Errors.sol\":\"Errors\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\".deps/github/equito-network/equito-evm-contracts/src/libraries/Errors.sol\":{\"keccak256\":\"0x71f69a5b3d0b5e763564066ad6f8663069f27148b7eaca7f08b87e4107dc9535\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e5e7fc2f7a922188b9b19f00ff9eabda587687ee188518054e27226a21df5393\",\"dweb:/ipfs/QmVqKMd9oJdg4cfkdEwcbP3CpHoztnZ1d2e3MAjvKutTt1\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"errors": {
							"CostMustBeGreaterThanZero()": [
								{
									"notice": "Thrown when the provided cost is not greater than zero."
								}
							],
							"InitialVerifierZeroAddress()": [
								{
									"notice": "Thrown when the initial verifier address provided in the constructor is zero."
								}
							],
							"InsufficientFee()": [
								{
									"notice": "Thrown when the provided fee is insufficient to cover the required cost."
								}
							],
							"InsufficientValueSent()": [
								{
									"notice": "Thrown when the amount of ether sent with the transaction is insufficient."
								}
							],
							"InvalidLength()": [
								{
									"notice": "Thrown when the lengths of arrays are invalid."
								}
							],
							"InvalidLiquidityProvider()": [
								{
									"notice": "Thrown when an invalid liquidity provider address is provided."
								}
							],
							"InvalidMessageSender()": [
								{
									"notice": "Thrown when the sender of a message is invalid."
								}
							],
							"InvalidMessagesProof()": [
								{
									"notice": "Thrown when the proof for verifying messages is invalid."
								}
							],
							"InvalidOperation()": [
								{
									"notice": "Thrown when an invalid operation code is encountered in the received message."
								}
							],
							"InvalidPeer(uint256)": [
								{
									"notice": "Thrown when a Peer address is not found in the mapping, given a chain selector."
								}
							],
							"InvalidRouter(address)": [
								{
									"notice": "Thrown when the router address is invalid."
								}
							],
							"InvalidSender(address)": [
								{
									"notice": "Thrown when an invalid sender is calling a function."
								}
							],
							"InvalidSessionId()": [
								{
									"notice": "Thrown when the provided session ID does not match the current session."
								}
							],
							"InvalidSovereign()": [
								{
									"notice": "Thrown when a message is received from an invalid sovereign account."
								}
							],
							"InvalidTokenPriceFromOracle()": [
								{
									"notice": "Thrown when the token price retrieved from the oracle is invalid or zero."
								}
							],
							"InvalidVerifierIndex()": [
								{
									"notice": "Thrown when the verifier index provided is out of bounds."
								}
							],
							"RouterAddressCannotBeZero()": [
								{
									"notice": "Thrown when the router address is zero."
								}
							],
							"RouterAlreadySet()": [
								{
									"notice": "Thrown when attempting to set the router, but the router is already set."
								}
							],
							"SessionIdMismatch()": [
								{
									"notice": "Thrown when there is a mismatch in session IDs during validation."
								}
							],
							"TransferFailed()": [
								{
									"notice": "Thrown when a transfer of fees to the liquidity provider fails."
								}
							]
						},
						"kind": "user",
						"methods": {},
						"notice": "Defines all error messages used in the EquitoApp contracts.",
						"version": 1
					}
				}
			}
		},
		"sources": {
			".deps/github/equito-network/equito-evm-contracts/src/libraries/Errors.sol": {
				"ast": {
					"absolutePath": ".deps/github/equito-network/equito-evm-contracts/src/libraries/Errors.sol",
					"exportedSymbols": {
						"Errors": [
							69
						]
					},
					"id": 70,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".23"
							],
							"nodeType": "PragmaDirective",
							"src": "33:24:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Errors",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 2,
								"nodeType": "StructuredDocumentation",
								"src": "59:90:0",
								"text": "@title Errors\n @notice Defines all error messages used in the EquitoApp contracts."
							},
							"fullyImplemented": true,
							"id": 69,
							"linearizedBaseContracts": [
								69
							],
							"name": "Errors",
							"nameLocation": "157:6:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 3,
										"nodeType": "StructuredDocumentation",
										"src": "170:125:0",
										"text": "@notice Thrown when the router address is invalid.\n @param router The address of the router that caused the error."
									},
									"errorSelector": "d7f73334",
									"id": 7,
									"name": "InvalidRouter",
									"nameLocation": "306:13:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 6,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 5,
												"mutability": "mutable",
												"name": "router",
												"nameLocation": "328:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 7,
												"src": "320:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 4,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "320:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "319:16:0"
									},
									"src": "300:36:0"
								},
								{
									"documentation": {
										"id": 8,
										"nodeType": "StructuredDocumentation",
										"src": "342:51:0",
										"text": "@notice Thrown when the router address is zero."
									},
									"errorSelector": "50082683",
									"id": 10,
									"name": "RouterAddressCannotBeZero",
									"nameLocation": "404:25:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 9,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "429:2:0"
									},
									"src": "398:34:0"
								},
								{
									"documentation": {
										"id": 11,
										"nodeType": "StructuredDocumentation",
										"src": "438:68:0",
										"text": "@notice Thrown when the proof for verifying messages is invalid."
									},
									"errorSelector": "b64d2f31",
									"id": 13,
									"name": "InvalidMessagesProof",
									"nameLocation": "517:20:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 12,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "537:2:0"
									},
									"src": "511:29:0"
								},
								{
									"documentation": {
										"id": 14,
										"nodeType": "StructuredDocumentation",
										"src": "546:69:0",
										"text": "@notice Thrown when the verifier index provided is out of bounds."
									},
									"errorSelector": "04f7d7f1",
									"id": 16,
									"name": "InvalidVerifierIndex",
									"nameLocation": "626:20:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 15,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "646:2:0"
									},
									"src": "620:29:0"
								},
								{
									"documentation": {
										"id": 17,
										"nodeType": "StructuredDocumentation",
										"src": "655:89:0",
										"text": "@notice Thrown when the initial verifier address provided in the constructor is zero."
									},
									"errorSelector": "e6ecef12",
									"id": 19,
									"name": "InitialVerifierZeroAddress",
									"nameLocation": "755:26:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 18,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "781:2:0"
									},
									"src": "749:35:0"
								},
								{
									"documentation": {
										"id": 20,
										"nodeType": "StructuredDocumentation",
										"src": "790:58:0",
										"text": "@notice Thrown when the lengths of arrays are invalid."
									},
									"errorSelector": "947d5a84",
									"id": 22,
									"name": "InvalidLength",
									"nameLocation": "859:13:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 21,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "872:2:0"
									},
									"src": "853:22:0"
								},
								{
									"documentation": {
										"id": 23,
										"nodeType": "StructuredDocumentation",
										"src": "881:59:0",
										"text": "@notice Thrown when the sender of a message is invalid."
									},
									"errorSelector": "7fee69a1",
									"id": 25,
									"name": "InvalidMessageSender",
									"nameLocation": "951:20:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 24,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "971:2:0"
									},
									"src": "945:29:0"
								},
								{
									"documentation": {
										"id": 26,
										"nodeType": "StructuredDocumentation",
										"src": "980:84:0",
										"text": "@notice Thrown when the provided fee is insufficient to cover the required cost."
									},
									"errorSelector": "025dbdd4",
									"id": 28,
									"name": "InsufficientFee",
									"nameLocation": "1075:15:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 27,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1090:2:0"
									},
									"src": "1069:24:0"
								},
								{
									"documentation": {
										"id": 29,
										"nodeType": "StructuredDocumentation",
										"src": "1099:86:0",
										"text": "@notice Thrown when the amount of ether sent with the transaction is insufficient."
									},
									"errorSelector": "a5fb6be9",
									"id": 31,
									"name": "InsufficientValueSent",
									"nameLocation": "1196:21:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 30,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1217:2:0"
									},
									"src": "1190:30:0"
								},
								{
									"documentation": {
										"id": 32,
										"nodeType": "StructuredDocumentation",
										"src": "1226:67:0",
										"text": "@notice Thrown when the provided cost is not greater than zero."
									},
									"errorSelector": "bf908dba",
									"id": 34,
									"name": "CostMustBeGreaterThanZero",
									"nameLocation": "1304:25:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 33,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1329:2:0"
									},
									"src": "1298:34:0"
								},
								{
									"documentation": {
										"id": 35,
										"nodeType": "StructuredDocumentation",
										"src": "1338:85:0",
										"text": "@notice Thrown when the token price retrieved from the oracle is invalid or zero."
									},
									"errorSelector": "bcf09f96",
									"id": 37,
									"name": "InvalidTokenPriceFromOracle",
									"nameLocation": "1434:27:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 36,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1461:2:0"
									},
									"src": "1428:36:0"
								},
								{
									"documentation": {
										"id": 38,
										"nodeType": "StructuredDocumentation",
										"src": "1470:80:0",
										"text": "@notice Thrown when a message is received from an invalid sovereign account."
									},
									"errorSelector": "b778be3a",
									"id": 40,
									"name": "InvalidSovereign",
									"nameLocation": "1561:16:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 39,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1577:2:0"
									},
									"src": "1555:25:0"
								},
								{
									"documentation": {
										"id": 41,
										"nodeType": "StructuredDocumentation",
										"src": "1586:89:0",
										"text": "@notice Thrown when an invalid operation code is encountered in the received message."
									},
									"errorSelector": "398d4d32",
									"id": 43,
									"name": "InvalidOperation",
									"nameLocation": "1686:16:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 42,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1702:2:0"
									},
									"src": "1680:25:0"
								},
								{
									"documentation": {
										"id": 44,
										"nodeType": "StructuredDocumentation",
										"src": "1711:74:0",
										"text": "@notice Thrown when an invalid liquidity provider address is provided."
									},
									"errorSelector": "02d12165",
									"id": 46,
									"name": "InvalidLiquidityProvider",
									"nameLocation": "1796:24:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 45,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1820:2:0"
									},
									"src": "1790:33:0"
								},
								{
									"documentation": {
										"id": 47,
										"nodeType": "StructuredDocumentation",
										"src": "1829:75:0",
										"text": "@notice Thrown when a transfer of fees to the liquidity provider fails."
									},
									"errorSelector": "90b8ec18",
									"id": 49,
									"name": "TransferFailed",
									"nameLocation": "1915:14:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 48,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1929:2:0"
									},
									"src": "1909:23:0"
								},
								{
									"documentation": {
										"id": 50,
										"nodeType": "StructuredDocumentation",
										"src": "1938:77:0",
										"text": "@notice Thrown when there is a mismatch in session IDs during validation."
									},
									"errorSelector": "ce2a8c60",
									"id": 52,
									"name": "SessionIdMismatch",
									"nameLocation": "2026:17:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 51,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2043:2:0"
									},
									"src": "2020:26:0"
								},
								{
									"documentation": {
										"id": 53,
										"nodeType": "StructuredDocumentation",
										"src": "2052:84:0",
										"text": "@notice Thrown when attempting to set the router, but the router is already set."
									},
									"errorSelector": "a9112be0",
									"id": 55,
									"name": "RouterAlreadySet",
									"nameLocation": "2147:16:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 54,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2163:2:0"
									},
									"src": "2141:25:0"
								},
								{
									"documentation": {
										"id": 56,
										"nodeType": "StructuredDocumentation",
										"src": "2172:64:0",
										"text": "@notice Thrown when an invalid sender is calling a function."
									},
									"errorSelector": "4c14f64c",
									"id": 60,
									"name": "InvalidSender",
									"nameLocation": "2247:13:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 59,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 58,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "2269:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 60,
												"src": "2261:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 57,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2261:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2260:16:0"
									},
									"src": "2241:36:0"
								},
								{
									"documentation": {
										"id": 61,
										"nodeType": "StructuredDocumentation",
										"src": "2283:83:0",
										"text": "@notice Thrown when the provided session ID does not match the current session."
									},
									"errorSelector": "2e4937ae",
									"id": 63,
									"name": "InvalidSessionId",
									"nameLocation": "2377:16:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 62,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2393:2:0"
									},
									"src": "2371:25:0"
								},
								{
									"documentation": {
										"id": 64,
										"nodeType": "StructuredDocumentation",
										"src": "2402:180:0",
										"text": "@notice Thrown when a Peer address is not found in the mapping, given a chain selector.\n @param chainSelector The chain selector for which the peer address is requested."
									},
									"errorSelector": "78d0dbfc",
									"id": 68,
									"name": "InvalidPeer",
									"nameLocation": "2593:11:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 67,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 66,
												"mutability": "mutable",
												"name": "chainSelector",
												"nameLocation": "2613:13:0",
												"nodeType": "VariableDeclaration",
												"scope": 68,
												"src": "2605:21:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 65,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2605:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2604:23:0"
									},
									"src": "2587:41:0"
								}
							],
							"scope": 70,
							"src": "149:2481:0",
							"usedErrors": [
								7,
								10,
								13,
								16,
								19,
								22,
								25,
								28,
								31,
								34,
								37,
								40,
								43,
								46,
								49,
								52,
								55,
								60,
								63,
								68
							],
							"usedEvents": []
						}
					],
					"src": "33:2598:0"
				},
				"id": 0
			}
		}
	}
}